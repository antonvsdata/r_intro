[["alkuvalmistelut.html", "R-ohjelmoinnin perusteet Alkuvalmistelut R-kurssi Sisällysluettelo", " R-ohjelmoinnin perusteet Anton Klåvus (2020), converted to bookdown by Juho Kopra (2021) 2021-06-09 Alkuvalmistelut R-kurssi Täältä löydät suomenkielisen materiaalin, joka tukee UEF:in R-kurssin suorittamista (R-kieli 3622223, 2 op). Jokaisen viikon materiaalit päivitetään tänne. Alla on ohjeet tarvittavien asioiden asentamiseen UEF:in koneille. Jokaiselle viikolle on oma kansio, jonka avaamalla aukeavat sen viikon ohjeet. Mahdollisesti mukana on myös muita tiedostoja, mutta ellei toisin mainita, itse tiedostoista ei tarvitse välittää vaan voi keskittyä itse ohjeisiin. Sisällysluettelo Muuttujat ja vektorit Kuvaajien piirtäminen Tietotyypit: matriisi, taulukko, lista ja data frame matriisi (matrix) taulukko (array) lista (list) data frame Datan sisään lukeminen Lineaariset mallit ja tilastolliset jakaumat Lineaariset mallit Todennäköisyysjakaumat Funktiot Ehtorakenteet Toistorakenteet "],["rstudio.html", "RStudio RStudion asennus RStudion käyttö Kurssilla tarvittavien R-pakettien asennus", " RStudio Erona Moodlessa löytyviin ohjeisiin, tuutoroinnissa käytetään R-ohjelmoinnin tukena RStudiota. RStudio on ohjelmointiympäristö eli IDE (Integrated Development Environment), joka tekee koodaamisesta huomattavasti mukavampaa. RStudion asennus Näiden ohjeiden avulla saat asennettua RStudion ja sen mukana R:n UEF:in koneille. Omalle koneelle asennettaessa täytyy ensin asentaa R, ja sitten RStudio. Ohjeet löytyvät helposti Googlesta, esim. täältä. RStudion saa asennettua UEF:in koneilla Sofware Centerin kautta. Software Center löytyy Windowsin omalla haulla. RStudio:n voi asentaa Software Centeristä, ja RStudion pitäisi sen jälkeen olla käytettävissä. RStudion käyttö RStudion näkymässä on neljä osaa: 1. Editori. Editorilla kirjoitetaan R-koodia sisältäviä tiedostoja, eli R-skriptejä. Uuden skriptin saa auki painamalla File -&gt; New File -&gt; R Script (tai Ctrl + Shift + N). Skripteihin tutustutaan myöhemmin kurssilla, mutta ne ovat yksinkertaisuudessaan kokoelma R-komentoja, jotka yhdessä tekevät jotain, esimerkiksi analysoivat jonkin tutkimusprojektin datan tai piirtävät valmiista tuloksista kuvaajia. Editoriin kirjoitettua koodia voi ajaa rivi kerrallaan painamalla rivin kohdalla Ctrl + Enter. Useamman rivin voi myös maalata ja suorittaa kerrallaan. Yläreunassa oleva “Source”-nappi ajaa kaiken nykyisen tiedoston koodin. R-skriptejä voi tallentaa ihan kuin muitakin tiedostoja. R-skpriptien tiedostopääte on .R 2. Konsoli. Konsolissa “ajetaan” eli suoritetaan R-komentoja. Jos editoriin kirjoitettua koodia ajetaan, RStudio ajaa komennot automaattisesti konsolissa. Konsolissa pelkkä Enter riittää koodirivin suorittamiseen. Voit kokeilla kirjoittaa konsoliin jonkun laskutoimituksen, kuten 2 * 3 ja painaa Enter, jolloin tuloksen pitäisi tulostua konsoliin. Voit myös kokeilla kirjoittaa laskuja editoriin, ja painaa Ctrl + Enter, jolloin pitäisi tapahtua sama asia. Suurin ero konsolin ja editorin välillä on se, että konsoliin kirjoitetut komennot eivät tallennu mihinkään tiedostoon. Jos siis haluat säästää koodisi, se tulee kirjoittaa editoriin ja tallentaa .R-tiedostoon. Saman istunnon aikana tehtyjä komentoja voi konsolissa selata ylös- ja alas-nuolila. Moodlen ohjeissa ja videoissa käytetään R:ää puhtaasta R-konsolista. Voit siis kuvitella, että kurssin videoissa näkyy vain RStudion tämä osa, ja muut osat ovat vain helpottamassa työtäsi. 3. Työtila Työtilassa näkyvät R-istunnon aikana luodut muuttujat. Näistä lisää ensimmäisen viikon materiaalissa. 4. Kuvaajat / Paketit / Manuaali Tässä osassa on monta käytännöllistä välilehteä: Plots: tänne ilmestyvät R:llä piirretyt kuvaajat Packages: Täältä voi hallita asennettuja paketteja (alla ohjeet tällä kurssilla tarvittavien pakettien asennukseen) Help: Täällä voi selata R:n manuaalia, jossa on ohjeet jokaiselle R-komennolla. Voit kokeilla ajaa editorissa tai konsolissa komennon ?print, joka avaa print-funktion ohjesivun. Kurssin suoritus RStudiolla Suurin osa kurssin tehtävistä on melko lyhyitä, joten ne voi tarvittaessa tehdä suoraan konsoliin. Suosittelen kuitenkin kirjoittamaan varsinkin pidemmät ja monimutkaisemmat tehtävät muistiin editoriin. Valitettavasti kurssin tehtävien aktivointi aiheuttaa RStudion toiminnassa hieman outouksia, koska kurssin tehtäviä ei ole suunniteltu RStudiolla tehtäviksi. Joskus kun editorista ajaa komennon, editorin tilalle aukeaa “kysymys”-ikkuna. Tästä ei kuitenkaan tarvitse välittää, vaan ikkunan voi sulkea. HUOM: kurssin osioiden tehtäviä ei voi tallentaa kesken osion, vaan jokainen osio on tehtävä kerralla kokonaan. Jos kuitenkin kirjoitat koodia editoriin ja tallennat tehtäviä .R-tiedostoon, voit tarvittaessa aloittaa osion toisena päivänä uudestaan ja ajaa edellisellä kerralla kirjoittamasi komennot helposti tiedostosta. Tehtäviä voi palauttaa vain UEFAD-verkon koneilla! Tehtävien tekemisen voi aloittaa komennolla Rkurssi::Rkurssi(123456), kun numeron 123456 korvaa omalla opiskelijanumerolla ja seuraamalla avautuvia ohjeita. Tätä varten tulee kuitenkin asentaa Rkurssi-paketti. Tähän on ohjeet alla. Kurssin tehtävissä pitää usein tallentaa asioita muuttujaan vast ja palauttaa tehtävä komennolla c. Suosittelenkin tekemään jokaista osiota varten erillisen R-skriptin, joka sisältää itse tehtävien tarvitseman koodin sekä palautuskomennot. Tällainen skripti näyttää jotakuinkin tältä: # T 1 vast &lt;- 1 c # T 2 vast &lt;- c(1, 2, 3) c # T 3 vast &lt;- &quot;jotain&quot; c Kun tehtävät tallentaa tähän tyyliin, voi ensi kerralla vain yksinkertaisesti ajaa skriptin haluamaansa tehtävään asti. Samalla koneella ja samalla opiskelijanumerolla pitäisi tulla samat tehtävät. Kurssilla tarvittavien R-pakettien asennus R-ohjelmoinnissa asennetaan usein R-paketteja. Paketit ovat kokonaisuuksia, jotka lisäävät R:ään ominaisuuksia. Esimerkiksi tälle kurssille tarvittavat paketit arpovat opiskelijalle tehtäviä kurssin aihepiiristä ja lähettävät tiedon osioiden suorituksesta opettajalle. Ensin asennetaan paketti sendmailR. Valitaan RStudion oikean alakulman osasta Packages -&gt; Install. Avautuvaan ikkunaan kirjoitetaan paketin nimeksi “sendmailR” ja asennetaan paketti. CRAN (Comprehensive R Archive Network) on paikka, johon iso osa R-paketeista on tallennettu, jotta ne on helppo asentaa. Itse tehtäviä arpova Rkurssi-paketti ei ole CRAN:issa, vaan se pitää ladata kurssin Moodle-sivulta Rkurssi.zip-tiedostona. Paketin asennusta varten valitaan Install-ikkunasta “Install from”-vaihtoehdoksi “Package Archive File”, ja valitaan aukeavasta ikkunasta juuri ladattu Rkurssi.zip "],["intro.html", "Kappale 1 Johdanto 1.1 Mikä R on ja mitä sillä tehdään?", " Kappale 1 Johdanto 1.1 Mikä R on ja mitä sillä tehdään? Ohjelmoinnin tavoitteena on kirjoittaa eli koodata ohjelma, joka suorittaa jonkun halutun tehtävän. Ohjelma koostuu useista komennoista, joista jokainen tekee jotain hyvin yksinkertaista. R on tehty ensisijaisesti tilastotiedettä ja data-analyysiä varten. R:llä kirjoitetaan yleensä lyhyitä ohjelmia, joita kutsutaan skripteiksi. R:llä ei siis ole tarkoitus kehittää esimerkiksi pelejä, tai muita ohjelmia joissa on graafinen käyttöliittymä, kuten vaikkapa Photoshop. R ei myöskään ole web-ohjelmointiin tarkoitettu kieli (vaikka oikeilla paketeilla R:lläkin pystyy tekemään web-sovelluksia). R on korkean tason ohjelmointikieli. Tämä tarkoittaa sitä, että R:ssä on paljon valmiita komentoja, joiden “alta” löytyy paljon lisää koodia, johon R-ohjelmoijan ei kuitenkaan tarvitse itse koskea. Esimerkiksi tilastollisen t-testin testin laskeminen vaatii useita matemaattisia välivaiheita, mutta R-ohjelmoija voi suorittaa testin yhdellä komennolla (t.test) joka antaa kaikki tarvittavat tiedot testistä. R:n käyttöä ja ohjelmointia muutenkin oppii parhaiten tekemällä. Tässä dokumentaatiossa on tekstin väliin upotettu R-koodia harmaissa laatikoissa, kuten alla olevassa esimerkissä. Kahdella ruudulla eli ##-merkinnällä alkavat rivit eivät ole koodia vaan koodin ajamisen aiheuttamia tulosteita (output). Otetaan ensimmäiseksi esimerkiksi klassinen “Hello, world!”-komento: print(&quot;Hello, world!&quot;) ## [1] &quot;Hello, world!&quot; print-funktio tulostaa sille annetun tekstin konsoliin. print on kätevä funktio mm. ohjelman toiminnan testaamiseen ja pidemmän ohjelman etenemisen seurantaan. R:ää voi käyttää myös laskimen sijaan. Alla olevassa esimerkissä lasketaan kuinka paljon jää hintaa 80 euron hintaiselle tuotteelle 35% alennuksen jälkeen. 80 * (1 - 0.35) ## [1] 52 Yksittäisten komentojen ajamisesta ei kuitenkaan ole yleensä hyötyä, ellei tuloksia voi tallentaa johonkin. Ohjelmointikielissä tietoja tallennetaan muuttujiin, joita käsitellään seuraavaksi. "],["variables-and-vectors.html", "Kappale 2 Muuttujat ja vektorit 2.1 Muuttujat (Variables) 2.2 Kommentit 2.3 Vektorit (Vectors) 2.4 Tehtävien aloitus", " Kappale 2 Muuttujat ja vektorit 2.1 Muuttujat (Variables) Muuttujat (variables) ovat yksi tärkeimmistä ohjelmointikielien rakenteista. Muuttujien tehtävä on säilyttää tietoa ja tuloksia edellisistä laskutoimituksista. Alla on yksinkertainen esimerkki muuttujien käytöstä R:ssä x &lt;- 3 y &lt;- 5 z &lt;- x + y z ## [1] 8 Edellisessä esimerkissä sijoitetaan (assign) eli tallennetaan muuttujaan x arvo 3 ja muuttujaan y arvo 4. Sen jälkeen muuttujien x ja y summa sijoitetaan muuttujaan z, jonka jälkeen tulostetaan muuttujan z arvo. &lt;- on R:n sijoitusoperaattori (Myös yhtä kuin-merkki = toimii melkein aina, mutta &lt;- on suositellumpi). Mutta miten muuttujan z arvo tulostui konsoliin, vaikka koodissa ei käytetty funktiota print? R:n erikoisominaisuus moneen muuhun ohjelmointikieleen verrattuna on se, että print-käskyä ei tarvitse aina kirjoittaa, vaan pelkästään muuttujan (tai laskutoimituksen) kirjoittaminen tulostaa arvon konsoliin. Alla olevassa koodissa kaikki rivit tulostavat saman tuloksen: z print(z) x + y print(x + y) 3 + 5 print(3 + 5) Muuttujiin voi sijoittaa muutakin kuin yksittäisiä lukuja, kuten merkkijonoja (strings), vektoreita, tai paljon monimutkaisempiakin rakenteita. x &lt;- &quot;Hello world&quot; x ## [1] &quot;Hello world&quot; 2.2 Kommentit Myöhemmin vastaan tulevassa koodissa käytetään kommentteja. Kommentit ovat koodin oheen kirjoitettua tekstiä, joka ei ole ohjelmointikieltä, ja joka ohitetaan koodia ajettaessa. Kommenttien tarkoitus on kuvailla koodin toimintaa. Oman koodin kommentointia on hyvä harjoitella alusta lähtien, vaikka ensimmäisten tehtävien koodi onkin hyvin yksinkertaista. hyvä nyrkkisääntö on muistaa, että koodia kirjoitetaan ihmisille, ei koneelle. R:ssä kommentit merkataan #-symbolilla. Edellinen esimerkki kommentoituna voisi näyttää jotakuinkin tältä: # Assign arbitrary numbers to two variables x &lt;- 3 y &lt;- 5 # Sum of two variables z &lt;- x + y # Print the results z ## [1] 8 2.3 Vektorit (Vectors) Nyt kun muuttujat ovat tuttuja, voimme siirtyä käsittelemään vektoreita. R:n vektorit ovat yksinkertaisia järjestettyjä tietorakenteita, jotka koostuvat alkioista (elements), esimerkiksi desimaaliluvuista. Alla oleva esimerkki sijoittaa muuttujaan x vektorin, joka sisältää 5 lukua. x &lt;- c(1, 2, 7.4, 15, 0.2) x ## [1] 1.0 2.0 7.4 15.0 0.2 Yksinkertaisin tapa tehdä vektori R:ssä on käyttää c()-funktiota, joka luo vektorin, jossa on sille annetut arvot annetussa järjestyksessä. Monet R-kielen komennot ja funktiot luovat vektoreita, alla muutama esimerkki: # Regular sequences seq(1, 10) ## [1] 1 2 3 4 5 6 7 8 9 10 seq(0, 1, by = 0.2) ## [1] 0.0 0.2 0.4 0.6 0.8 1.0 seq_len(6) ## [1] 1 2 3 4 5 6 3:9 ## [1] 3 4 5 6 7 8 9 # Repeat values rep(1, 5) ## [1] 1 1 1 1 1 rep(c(1, 2), 3) # Repeat vector c(1,2) 3 times ## [1] 1 2 1 2 1 2 rep(c(1, 2, 3), 3) # Repeat all values in vector c(1, 2, 3) 3 times ## [1] 1 2 3 1 2 3 1 2 3 2.3.1 Vektorilaskentaa Vektoreilla laskeminen on usein hyvin intuitiivista (lisää vaaranpaikoista myöhemmin). Kun vektoriin kohdistetaan laskutoimintoja, sama operaatio tehdään kaikille vektorin alkioille (engl. vectorization). x &lt;- c(1, 2, 3, 6, 10) x * 2 ## [1] 2 4 6 12 20 x / 2 + 1 ## [1] 1.5 2.0 2.5 4.0 6.0 Entä jos vektoreita lisää toisiinsa, tai kertoo keskenään? Jos vektorit ovat samanpituisia, operaatio toteutetaan alkio kerrallaan. Jos vektorit ovat eripituisia, R yrittää kierrättää (recycle) lyhyempää vektoria niin, että siitä tulee yhtä pitkä kuin pidempi vektori. Tämän jälkeen operaatio suoritetaan alkio kerrallaan (itse asiassa näin tapahtui myös aiemmissa esimerkeissä, kun vektori kerrottiin yksittäisellä luvulla. R:ssä yksittäiset luvut ovat vektoreita, joiden pituus on 1). Jos kierrätys ei onnistu, eli pidemmän vektorin pituus ei ole jaollinen lyhyemmän pituudella, R antaa virheilmoituksen. x &lt;- c(1, 2, 3, 6, 10, 2) y &lt;- c(1, 1, 1, 3, 3, 3) # or rep(c(1, 3), each = 3) z &lt;- c(2, 4) x + y # Element-wise sum ## [1] 2 3 4 9 13 5 x * y # Element-wise multipliocation ## [1] 1 2 3 18 30 6 x + z ## [1] 3 6 5 10 12 6 R:ssä on myös paljon funktioita, joilla voi laskea vektoreista erilaisia tunnuslukuja, kuten keskiarvon, mediaanin, keskihajonnan jne. x &lt;- c(1, 2, 3, 6, 10, 2) # Sample mean (average) mean(x) ## [1] 4 # Standard deviation sd(x) ## [1] 3.405877 # Sum sum(x) ## [1] 24 2.3.2 Ei-numeeriset vektorit 2.3.2.1 Merkkijonovektorit Vektorien ei ole pakko sisältää lukuja. Vektorit voivat sisältää esimerkiksi merkkijonoja, kuten alussa nähty “Hello, world!”. Merkkijonotyypin nimi R:ssä on character. x &lt;- c(&quot;Hello, world!&quot;, &quot;R is the best&quot;, &quot;I&quot;, &quot;like&quot;, &quot;programming&quot;, &quot;!&quot;) x ## [1] &quot;Hello, world!&quot; &quot;R is the best&quot; &quot;I&quot; &quot;like&quot; ## [5] &quot;programming&quot; &quot;!&quot; Merkkijonovektoreiden muokkausta varten on omia funktiota, tärkeimpinä paste ja paste0, jotka yhdistävät merkkijonoja toisiinsa. Myös numeerisia vektoreita voi antaa näille funktioille, ja ne muutetaan merkkijonoiksi. first_names &lt;- c(&quot;Diana&quot;, &quot;Peter&quot;, &quot;Bruce&quot;) last_names &lt;- c(&quot;Prince&quot;, &quot;Parker&quot;, &quot;Wayne&quot;) paste(first_names, last_names) ## [1] &quot;Diana Prince&quot; &quot;Peter Parker&quot; &quot;Bruce Wayne&quot; students &lt;- paste0(&quot;Student_&quot;, 1:5) 2.3.2.2 Loogiset vektorit Kolmas yleinen vektorityyppi on looginen vektori, joka sisältää arvoja TRUE eli tosi tai FALSE eli epätosi. Loogisia vektoreita käytetään yleensä joko merkitsemään binäärisiä muuttuja (esimerkiksi paastosiko koehenkilö ennen näytteenottoa) tai vektorien ja matriisien indeksoinnissa (tästä lisää pian). Tällöin loogisia vektoreita syntyy erilaisten loogisten operaattorien avulla: x &lt;- c(1, 2, 3, 6, 10, 2) x &gt; 3 # Is the element of x greater than 3? ## [1] FALSE FALSE FALSE TRUE TRUE FALSE x &gt;= 3 # Greater or equal to three= ## [1] FALSE FALSE TRUE TRUE TRUE FALSE x == 6 # Equal to 6? ## [1] FALSE FALSE FALSE TRUE FALSE FALSE x != 2 # Not equal to 2? ## [1] TRUE FALSE TRUE TRUE TRUE FALSE 2.3.2.3 Loogiset vektorit ja matematiikka Jos loogiselle vektorille tekee operaation, joka odottaa numeerista vektoria, R muuttaa automaattisesti arvot TRUE ykkösiksi ja arvot FALSE nolliksi. Tämä on erityisen hyödyllistä käytettäessä funktiota sum. Tällä tavalla saadaan helposti tietää esim. kuinka moni vektorin alkio täyttää tietyn ehdon: x &lt;- c(1, 3, 5, 2, 19) above_3 &lt;- x &gt; 3 # Logical vector automatically converted to numeric x + 1 ## [1] 2 4 6 3 20 # how many elements of x are smaller than 10? sum(x &lt; 10) ## [1] 4 2.3.3 Vektorien indeksointi ja leikkely Usein vektorista halutaan poimia vain tietyt arvot, esimerkiksi vain ensimmäiset 5 arvoa, tai vain arvot, jotka täyttävät tietyt ehdot. R:ssä vektorin indeksointiin käytetään hakasulkeita []. Yleisimmät indeksointitavat ovat antaa hakasulkeiden sisään vektori kokonaislukuja, jotka vastaavat järjestyslukuja, jotka vektorista halutaan poimia (HUOM kokeneemmat koodarit, R:ssä indeksointi alkaa ykkösestä, ei nollasta!). Toinen vaihtoehto on käyttää loogista vektoria, jolloin vektorista poimitaan ne alkiot, joiden kohdalla loogisen vektorin arvo on TRUE. Tämä on yksinkertaisempaa kuin miltä se kuulostaa: x &lt;- c(1, 2, 3, 6, 10, 2) # Picking exact elements x[2:3] # Second and third values ## [1] 2 3 x[c(4, 5, 1)] # Note that the order does not have to be increasing ## [1] 6 10 1 # Using logical vector as condition x[x &gt; 3] ## [1] 6 10 # The condition can be based on another vector characters &lt;- c(&quot;Yoda&quot;, &quot;C-3PO&quot;, &quot;Rey&quot;, &quot;R2-D2&quot;, &quot;Anakin&quot;, &quot;Baby Yoda&quot;) heights &lt;- c(66, 175, 170, 109, 183, 40.5) # Only characters shorter than 120 cm characters[heights &lt; 120] ## [1] &quot;Yoda&quot; &quot;R2-D2&quot; &quot;Baby Yoda&quot; 2.3.4 Puuttuvat arvot Monessa tutkimusprojektissa törmätään syystä tai toisesta jossain vaiheessa puuttuviin arvoihin. Hyvä esimerkki ovat seurantatutkimukset, jossa usein seurannan lopussa on jäljellä vähemmän koehenkilöitä kuin alussa. Puuttuvia arvoja merkataan R:ssä merkinnällä NA (not available). Puuttuvat arvot noudattavat yksinkertaista logiikkaa: mikä tahansa operaatio NA:lle antaa tulokseksi NA. Funktiot, jotka operoivat koko vektoria, kuten sum tai mean voidaan erikseen asettaa poistamaan puuttuvat arvot ennen summan, keskiarvon tms. laskemista. missing &lt;- c(1, 2, NA, 4, NA, 6) full &lt;- seq(1, 6) # Addition with NA returns NA missing + full ## [1] 2 4 NA 8 NA 12 # Sum of vector with NAs returns NA sum(missing) ## [1] NA # Removing NAs before summation sum(missing, na.rm = TRUE) ## [1] 13 HUOM! Funktio is.na tarkistaa, onko jokin arvo puuttuva. Perinteinen yhtäsuuruuden testaaminen ei siis toimi # Just returns NA NA == NA ## [1] NA # Returns a logical value as expected is.na(NA) ## [1] TRUE is.na(1) ## [1] FALSE # is.na operates element-wise on a vector missing &lt;- c(1, 2, NA, 4, NA, 6) is.na(missing) ## [1] FALSE FALSE TRUE FALSE TRUE FALSE 2.4 Tehtävien aloitus Tämän ohjeen ja R:n virallisen manuaalin tai pienen googlailun avulla selviät ensimmäisen viikon tehtävistä. Katso vielä etusivulta vinkki tehtävien tallentamisesta R-skriptiin (linkki).# Introduction {#intro} "],["data-types.html", "Kappale 3 Tietotyypit 3.1 Esittely 3.2 Matriisi 3.3 Taulukko 3.4 Lista 3.5 Data frame 3.6 View()", " Kappale 3 Tietotyypit 3.1 Esittely Tässä osassa tutustutaan neljään uuteen tietorakenteeseen: matriisi (matrix) taulukko (array) lista (list) data frame Taulukko on juuri sitä miltä se kuulostaa: vektorintapainen tietorakenne, johon tallennetaan alkioita (elements), joilla on kaikilla sama luokka (class), eli esimerkiksi lukuja. Ero vektoriin on se, että taulukolla on useampi ulottuvuus. Matriisi on erikoistapaus taulukosta, sillä matriisi on kaksiulotteinen taulukko. Matriisi vastaa siis oikeastaan paremmin sitä mielikuvaa, joka monelle tulee mieleen suomen sanasta taulukko, ja matriisit ovatkin paljon yleisempiä kuin moniulotteiset taulukot. Matriisi voi olla joillekin sanana tuttu myös tilastotieteen tai matematiikan kursseilta, ja R:n matriisi vastaakin matemaattista matriisia. Tästä syystä matriisi on hyvin yleinen tietorakenne, johon ei voi olla törmäämättä jos käyttää R:ää tutkimuksessa. Lista on kokoelma alkioita, joilla voi olla eri luokkia. Data frame on matriisin kaltainen kaksiulotteinen tietorakenne, jonka sarakkeilla voi olla eri luokkia. Aloitetaan matriiseista. 3.2 Matriisi 3.2.1 Matriisin luominen Matriisin luominen on yksinkertaista, ja tapahtuu funktiolla matrix matrix(1:9, nrow = 3, ncol = 3) ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 Funktiolle matrix annetaan siis matriisiin tallennettavat luvut vektorina, sekä matriisin rivien ja sarakkeiden määrä (ncol ja nrow). Matriisi voi koostua myös kokonaan tietystä arvosta: matrix(0, nrow = 2, ncol = 5) ## [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 Useimmiten matriisien data luetaan R:ään jostain tiedostosta, joka on tuotettu Excelillä tai jollain muulla ohjelmalla (tutkimustulosten kirjaus suoraan R:ään olisi raskasta). Matriisien luonti käsin on kuitenkin hyvä osata, sillä pienillä matriiseilla on kätevää testata omaa koodia. Myös yllä olevan kaltaisia, esim. nollalla täytettyjä matriiseja on joskus kätevää käyttää “alustana”, kun lasketaan omasta datasta tuloksia rivi tai sarake kerrallaan. Tämä johtuu siitä, että olemassa olevan matriisin rivin arvojen vaihtaminen on nopeampi operaatio kuin rivin lisääminen matriisiin. 3.2.2 Matriisin koko Joskus voi törmätä matriiseihin, joiden koko ei tiedä, tai ei halua olettaa. Tällöin tarvitaan funktioita, jotka kertovat matriisin koosta. Esimerkiksi, kun luetaan dataa R:ään tiedostoista, on hyvä tarkistaa, että kaikki rivit ja sarakkeet ovat mukana. nrow ja ncol palauttavat rivien ja sarakkeiden määrän, dim palauttaa matriisin rivien ja sarakkeiden määrän, rivit ensin. X &lt;- matrix(1:12, ncol = 4) # Number of rows nrow(X) ## [1] 3 # Number of columns ncol(X) ## [1] 4 #Dimensions dim(X) ## [1] 3 4 3.2.3 Matriisin indeksointi Matriisin indeksointi on hyvin samantapainen operaatio kuin vektorin indeksointi, eli matriisin perään laitetaan hakasulkeet ja niihin määritellään halutut arvot. Matriisin indeksoinnissa pitää kuitenkin antaa erikseen indeksit riveille ja sarakkeille, pilkulla erotettuna. # Only nrow is enough, since the number of columns must be 3 X &lt;- matrix(1:9, nrow = 3) X ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 # Element on second row, third column X[2, 3] ## [1] 8 # The complete first row X[1, ] ## [1] 1 4 7 # The second and third values of the second column X[2:3, 3] ## [1] 8 9 # Get rows where the values of the first column is &gt; 1 X[X[, 1] &gt; 1, ] ## [,1] [,2] [,3] ## [1,] 2 5 8 ## [2,] 3 6 9 HUOM: jos matriisia indeksoidessa tuloksessa sarakkeiden tai rivien määrä on tasan yksi, kuten yllä olevissa esimerkeissä viimeistä lukuun ottamatta, tuloksena on vektori, ei matriisi. Jos haluaa tuloksen olevan matriisi, tulee hakasulkeisiin lisätä määre drop = FALSE # The complete first row X[1, ,drop = FALSE] ## [,1] [,2] [,3] ## [1,] 1 4 7 # The second and third values of the second column X[2:3, 3, drop = FALSE] ## [,1] ## [1,] 8 ## [2,] 9 Matriiseja voi myös muokata sijoittamalla haluttuihin paikkoihin uusia arvoja: # Copy of X X_new &lt;- X # Replace first row with new values X_new[1, ] &lt;- c(10, 13, 15) X_new ## [,1] [,2] [,3] ## [1,] 10 13 15 ## [2,] 2 5 8 ## [3,] 3 6 9 # Replacement can also be a single value, and will be recycled X_new[2:3, 1] &lt;- 0 X_new ## [,1] [,2] [,3] ## [1,] 10 13 15 ## [2,] 0 5 8 ## [3,] 0 6 9 Rivejä tai sarakkeita voi myös poistaa. Tämä tapahtuu antamalla indeksi miinusmerkkisenä: # Without first row X[-1, ] ## [,1] [,2] [,3] ## [1,] 2 5 8 ## [2,] 3 6 9 # Without second column X[, -2] ## [,1] [,2] ## [1,] 1 7 ## [2,] 2 8 ## [3,] 3 9 3.2.3.1 Indeksimatriisi (index matrix) Jos halutaan poimia useampi yksittäinen arvo matriisista, tulee käyttää indeksimatriisia (index matrix). Esimerkiksi, jos haluttaisiin poimia äskeisestä X-matriisista arvot [1, 2], [1, 3] ja [2,2], tämä ei toimi: X[c(1, 1, 2), c(2, 3, 2)] ## [,1] [,2] [,3] ## [1,] 4 7 4 ## [2,] 4 7 4 ## [3,] 5 8 5 vaan tulee käyttää indeksimatriisia, jonka jokainen rivi antaa yhden halutun alkion indeksit, ensin rivi ja sitten sarake. Indeksimatriiseja tehdessä kannattaa asettaa lisämäärä byrow = TRUE, jolloin alkiot laitetaan matriisiin rivi kerrallaan, ei sarake kerrallaan niin kuin oletuksena. i &lt;- matrix(c(1, 2, 1, 3, 2, 2), nrow = 3, byrow = TRUE) i ## [,1] [,2] ## [1,] 1 2 ## [2,] 1 3 ## [3,] 2 2 X[i] ## [1] 4 7 5 3.2.4 Matriisien rakentaminen vektoreista Matriisi koostuu usein useammasta muuttujasta ja havainnoista. Yleensä jokainen rivi vastaa yhtä havaintoa, ja sarake muuttujaa. Tämän takia on hyvä tietää, miten yksittäisistä vektoreista saa koottua matriiseja. Alla olevassa esimerkissä on koottu yhteen matriisiin Star Wars-hahmojen pituuksia ja painoja. Tämä tapahtuu cbind funktiolla (column bind), joka nimensä mukaan yhdistää vektorit matriisin sarakkeiksi. cbind voi yhdistää myös valmiita matriiseja yhteen, niin että matriisit ovat “vierekkäin” eli yhdistetyssä matriisissa on kummankin matriisin sarakkeet (rivien määrän tulee olla sama). Vastaavasti rbind (row bind) yhdistää matriiseja “allekkain”. heights &lt;- c(172, 167, 96, 202, 150, 178) masses &lt;- c(77, 75, 32, 136, 49, 120) starwars &lt;- cbind(heights, masses) starwars ## heights masses ## [1,] 172 77 ## [2,] 167 75 ## [3,] 96 32 ## [4,] 202 136 ## [5,] 150 49 ## [6,] 178 120 3.2.5 Rivien ja sarakkeiden nimeäminen Matriisien rivit ja sarakkeet voi nimetä, ja usein tässä onkin järkeä. Yllä olevassa esimerkissä starwars-matriisin sarakkeet on nimetty alkuperäisten vektorin mukaan. Alla olevassa esimerkissä on lisää tapoja nimetä rivejä ja sarakkeita # Set column names by naming arguments while building matrix from vectors cbind(Height = heights, Mass = masses) ## Height Mass ## [1,] 172 77 ## [2,] 167 75 ## [3,] 96 32 ## [4,] 202 136 ## [5,] 150 49 ## [6,] 178 120 # Set column and row names explicitly colnames(starwars) &lt;- c(&quot;Height&quot;, &quot;Mass&quot;) rownames(starwars) &lt;- c(&quot;Luke Skywalker&quot;, &quot;C-3PO&quot;, &quot;R2-D2&quot;, &quot;Darth Vader&quot;, &quot;Leia Organa&quot;, &quot;Owen Lars&quot;) starwars ## Height Mass ## Luke Skywalker 172 77 ## C-3PO 167 75 ## R2-D2 96 32 ## Darth Vader 202 136 ## Leia Organa 150 49 ## Owen Lars 178 120 Nimettyjä matriiseja voi indeksoida myös nimien perusteella: starwars[c(&quot;Luke Skywalker&quot;, &quot;R2-D2&quot;), ] ## Height Mass ## Luke Skywalker 172 77 ## R2-D2 96 32 Matriisiin voi myös lisätä uusia sarakkeita cbind funktiolla. Alla lisätään matriisiin starwars uusi sarake, jossa on hahmojen BMI: # Create a vector for BMI and add to matrix with cbind bmi &lt;- starwars[, &quot;Mass&quot;] / (starwars[, &quot;Height&quot;] / 100)^2 cbind(starwars, &quot;BMI&quot; = bmi) ## Height Mass BMI ## Luke Skywalker 172 77 26.02758 ## C-3PO 167 75 26.89232 ## R2-D2 96 32 34.72222 ## Darth Vader 202 136 33.33007 ## Leia Organa 150 49 21.77778 ## Owen Lars 178 120 37.87401 3.2.6 Matriiseilla laskeminen Matriiseilla laskeminen on hyvin samankaltaista kuin vektoreilla laskeminen. Matriisin ja yksittäisen luvun välisessä operaatiossa matriisin alkiot käsitellään yksitellen. Samoin samankokoiset matriisit voi esim. lisätä yhteen, jolloin lisäys tapahtuu alkio kerrallaan. X &lt;- matrix(1:9, nrow = 3) Y &lt;- matrix(3:11, nrow = 3, ncol = 3) # Element-wise multiplication X * 2 ## [,1] [,2] [,3] ## [1,] 2 8 14 ## [2,] 4 10 16 ## [3,] 6 12 18 # Element-wise sum X + Y ## [,1] [,2] [,3] ## [1,] 4 10 16 ## [2,] 6 12 18 ## [3,] 8 14 20 Matriiseille on lisäksi määritelty paljon matriisien omia laskutoimituksia, niistä voi lukea lisää oppikirjasta. Matriisilaskentaa opiskelleille huomio: R:ssä oletuksena kertolasku tehdään alkioittain, matriisien kertolasku tapahtuu operaattorilla %*%. 3.3 Taulukko Kuten alussa todettiin, taulukot (array) ovat hyvin harvinaisia, joten niihin ei kannata tällä kurssilla keskittyä. Niitä kuitenkin tarvitaan joidenkin tehtävien tekemiseen, joten tässä on hyvin lyhyt oppimäärä taulukoista. Taulukot ovat matriisien kaltaisia, mutta taulukossa voi olla yli kaksi ulottuvuutta. Oikeastaan matriisit ovat kaksiulotteisia taulukoita. Alla on esimerkki 3-ulotteisesta taulukosta, jota voi ajatella “peräkkäin” olevina matriiseina. Alla on kuva 1-ulotteisesta taulukosta eli vektorista, 2-ulotteisesta taulukosta eli matriisista ja 3-ulotteisesta taulukosta. Taulukkoja luodaan matriisien tapaan funktiolla array. Toisin kuin matriisien tapauksessa, array-funktiolle pitää kertoa rivien ja sarakkeiden määrän lisäksi ulottuvuuksien määrä. Alla oleva esimerkki luo 3-ulotteisen taulukon, jonka voi ajatella koostuvan kolmesta 4 x 2 matriisista. my_array &lt;- array(1:24, dim = c(4, 2, 3)) my_array ## , , 1 ## ## [,1] [,2] ## [1,] 1 5 ## [2,] 2 6 ## [3,] 3 7 ## [4,] 4 8 ## ## , , 2 ## ## [,1] [,2] ## [1,] 9 13 ## [2,] 10 14 ## [3,] 11 15 ## [4,] 12 16 ## ## , , 3 ## ## [,1] [,2] ## [1,] 17 21 ## [2,] 18 22 ## [3,] 19 23 ## [4,] 20 24 Taulukoita indeksoidaan aivan kuten matriiseja, mutta jokaiselle ulottuvuudelle on annettava oma indeksi: # The first 2 rows of each &quot;layer&quot; my_array[1:2, , ] ## , , 1 ## ## [,1] [,2] ## [1,] 1 5 ## [2,] 2 6 ## ## , , 2 ## ## [,1] [,2] ## [1,] 9 13 ## [2,] 10 14 ## ## , , 3 ## ## [,1] [,2] ## [1,] 17 21 ## [2,] 18 22 # Second column from last two layers my_array[, 2, 2:3] ## [,1] [,2] ## [1,] 13 21 ## [2,] 14 22 ## [3,] 15 23 ## [4,] 16 24 3.4 Lista Lista (list) on vektorinkaltainen tietorakenne, jossa on järjestyksessä alkioita, jotka on mahdollisesti nimetty. Tärkeä ero vektoriin verrattuna on, että listan alkiot voivat olla erityyppisiä. Listoja luodaan list-funktiolla: example_list &lt;- list(c(1, 2, 3), matrix(0, nrow = 3, ncol = 4), &quot;list can include anything&quot;) example_list ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [,1] [,2] [,3] [,4] ## [1,] 0 0 0 0 ## [2,] 0 0 0 0 ## [3,] 0 0 0 0 ## ## [[3]] ## [1] &quot;list can include anything&quot; subject_ids &lt;- c(&quot;ANKL&quot;, &quot;PEPA&quot;, &quot;DIPR&quot;) measurements &lt;- matrix(c(1, 2.5, 3, 3.5, 5, 3, 2.3, 3, 1.6), nrow = 3) colnames(measurements) &lt;- c(&quot;CRP&quot;, &quot;HDL&quot;, &quot;LDL&quot;) rownames(measurements) &lt;- subject_ids # List names can be given with or without quotes study &lt;- list(Subject_ID = subject_ids, &quot;Measurements&quot; = measurements, Study_name = &quot;Blood tests&quot;) study ## $Subject_ID ## [1] &quot;ANKL&quot; &quot;PEPA&quot; &quot;DIPR&quot; ## ## $Measurements ## CRP HDL LDL ## ANKL 1.0 3.5 2.3 ## PEPA 2.5 5.0 3.0 ## DIPR 3.0 3.0 1.6 ## ## $Study_name ## [1] &quot;Blood tests&quot; Listoja ja niiden kaltaisia olioita käytetään R:ssä paljon. Listoihin on kätevä kerätä erilaista tietoa, jotka halutaan säilyttää samassa paketissa. Esimerkiksi yksinkertaisetkin tilastolliset mallit tuottavat paljon erilaista tietoa, jotka pakataan listaan (tarkemmin listan kaltaiseen olioon, tästä lisää myöhemmin). 3.4.1 Listojen alkioiden käsittely Listan alkioihin pääsee käsiksi kahdella eri tavalla: kaksoishakasulkeilla [[]] tai, jos lista on nimetty, dollarimerkillä $: # By position study[[2]] ## CRP HDL LDL ## ANKL 1.0 3.5 2.3 ## PEPA 2.5 5.0 3.0 ## DIPR 3.0 3.0 1.6 # By name study[[&quot;Subject_ID&quot;]] ## [1] &quot;ANKL&quot; &quot;PEPA&quot; &quot;DIPR&quot; # Using dollar sign study$Study_name ## [1] &quot;Blood tests&quot; Listaa voi indeksoida myös yksinkertaisilla hakasulkeilla. Tällöin palautetaan aina lista, eikä yksittäistä alkiota kuten aiemmin. Tämän demonstroiminen vaatii tutustumista uuteen funktioon class, joka palauttaa argumenttinsa luokan (class). Vektorin luokka vaihtelee vektorin sisällön mukaan: numeric = lukuja, character = merkkijonoja, logical = loogisia arvoja, jne. Listojen luokka on luonnollisesti list. Lisätietoa: R:ssä kaikki muuttujiin tallennettavat tiedot ovat olioita (object). Ohjelmointikielten olioilla on aina luokka, joka määrittää sen ominaisuudet. Esimerkiksi print ja plot-komennot toimivat eri tavalla riippuen niiden argumentin luokasta. Tarkastellaan alla, mikä ero yksinkertaisilla ja kaksinkertaisilla hakasulkeilla on listan indeksoinnissa: # Returns a list of length one with the matrix as the only element study[2] ## $Measurements ## CRP HDL LDL ## ANKL 1.0 3.5 2.3 ## PEPA 2.5 5.0 3.0 ## DIPR 3.0 3.0 1.6 class(study[2]) ## [1] &quot;list&quot; # Returns the actual matrix study[[2]] ## CRP HDL LDL ## ANKL 1.0 3.5 2.3 ## PEPA 2.5 5.0 3.0 ## DIPR 3.0 3.0 1.6 class(study[[2]]) ## [1] &quot;matrix&quot; &quot;array&quot; # Dollar sign also returns the matrix class(study$Measurements) ## [1] &quot;matrix&quot; &quot;array&quot; # Single brackets works as subscripting just like with vectors study[2:3] ## $Measurements ## CRP HDL LDL ## ANKL 1.0 3.5 2.3 ## PEPA 2.5 5.0 3.0 ## DIPR 3.0 3.0 1.6 ## ## $Study_name ## [1] &quot;Blood tests&quot; 3.4.2 Alkion lisäys listaan ja listojen yhdistäminen Yksittäisen alkion voi lisätä listaan sijoittamalla listan johonkin indeksiin tai nimeen uusi arvo (indeksin pitää olla yhtä suurempi kuin listan pituus). HUOM! Listan alkio voi myös itse olla lista (sisäkkäinen lista = nested list). # Add a character matrix as the fourth element of study study[[4]] &lt;- matrix(c(&quot;CPR&quot;, &quot;HDL&quot;, &quot;LDL&quot;, &quot;C-reactive protein&quot;, &quot;High-density lipoprotein&quot;, &quot;Low-density lipoprotein&quot;), ncol = 2) # An element of a list can also be a list study[[&quot;professional&quot;]] &lt;- list(name = c(&quot;John H. Watson&quot;), position = &quot;Medical doctor&quot;, age = 45) study ## $Subject_ID ## [1] &quot;ANKL&quot; &quot;PEPA&quot; &quot;DIPR&quot; ## ## $Measurements ## CRP HDL LDL ## ANKL 1.0 3.5 2.3 ## PEPA 2.5 5.0 3.0 ## DIPR 3.0 3.0 1.6 ## ## $Study_name ## [1] &quot;Blood tests&quot; ## ## [[4]] ## [,1] [,2] ## [1,] &quot;CPR&quot; &quot;C-reactive protein&quot; ## [2,] &quot;HDL&quot; &quot;High-density lipoprotein&quot; ## [3,] &quot;LDL&quot; &quot;Low-density lipoprotein&quot; ## ## $professional ## $professional$name ## [1] &quot;John H. Watson&quot; ## ## $professional$position ## [1] &quot;Medical doctor&quot; ## ## $professional$age ## [1] 45 # Note that the fourth element has no name names(study) ## [1] &quot;Subject_ID&quot; &quot;Measurements&quot; &quot;Study_name&quot; &quot;&quot; &quot;professional&quot; Listoja voi yhdistää vektorien tapaan c()-funktiolla: # Concatenate two vectors vector1 &lt;- c(3, 6, 5) vector2 &lt;- c(1, 2, 3) c(vector1, vector2) ## [1] 3 6 5 1 2 3 list1 &lt;- list(vector = vector1, name = &quot;list1&quot;) list2 &lt;- study[1:2] # Concatenate three lists, names stay the same c(list1, list2, list(first_element = &quot;A&quot;, second = &quot;B&quot;)) ## $vector ## [1] 3 6 5 ## ## $name ## [1] &quot;list1&quot; ## ## $Subject_ID ## [1] &quot;ANKL&quot; &quot;PEPA&quot; &quot;DIPR&quot; ## ## $Measurements ## CRP HDL LDL ## ANKL 1.0 3.5 2.3 ## PEPA 2.5 5.0 3.0 ## DIPR 3.0 3.0 1.6 ## ## $first_element ## [1] &quot;A&quot; ## ## $second ## [1] &quot;B&quot; 3.5 Data frame Data frame on erittäin yleinen tapa tallentaa tietoa R:ssä. Data frame on kaksiulotteinen tietorakenne, eli sillä on rivejä ja sarakkeita aivan kuten matriisilla. Data framen ja matriisin välillä on kuitenkin yksi tärkeä ero: data framen sarakkeet voivat olla eri luokan vektoreita. Muutetaan esimerkiksi edellä nähdyn study-listan ``Subject_IDjaMeasurements```-osat yhdeksi data frameksi: study_data &lt;- data.frame(Subject_ID = study$Subject_ID, study$Measurements) study_data ## Subject_ID CRP HDL LDL ## ANKL ANKL 1.0 3.5 2.3 ## PEPA PEPA 2.5 5.0 3.0 ## DIPR DIPR 3.0 3.0 1.6 data.frame-funktiolle voi antaa sekaisin yksittäisiä vektoreita, tai kokonaisia matriiseja tai valmiita data frameja, jotka kaikki yhdistetään yhdeksi data frameksi. 3.5.1 Data framen käsittely Vaikka data frame näyttää ulkoisesti matriisilta, data frame on itse asiassa lista, jonka kaikki alkiot ovat yhtä pitkiä vektoreita. Data framella on kuitenkin monta erityisominaisuutta, ja data frame käyttäytyy välillä kuin matriisi, välillä kuin lista. Tässä muutama esimerkki: # Subscripting with brackets - as matrix study_data[2:3, 1:3] ## Subject_ID CRP HDL ## PEPA PEPA 2.5 5 ## DIPR DIPR 3.0 3 # Rownames and colnames - as matrix colnames(study_data) ## [1] &quot;Subject_ID&quot; &quot;CRP&quot; &quot;HDL&quot; &quot;LDL&quot; # Individual columns can be accessed and added with dollar sign - as list study_data$CRP ## [1] 1.0 2.5 3.0 study_data$height &lt;- c(168, 185, 172) study_data ## Subject_ID CRP HDL LDL height ## ANKL ANKL 1.0 3.5 2.3 168 ## PEPA PEPA 2.5 5.0 3.0 185 ## DIPR DIPR 3.0 3.0 1.6 172 # Filtering based on a variable can be done like this study_data[study_data$HDL &lt; 4, ] ## Subject_ID CRP HDL LDL height ## ANKL ANKL 1 3.5 2.3 168 ## DIPR DIPR 3 3.0 1.6 172 Uuden rivin lisäys data frameen on hieman monimutkaisempaa kuin uuden rivin lisääminen matriisiin, sillä ensin pitää tehdä uusi data frame, jolla on samat sarakkeet kuin alkuperäisellä, ja vasta sitten liittää se komennolla rbind(). new_row &lt;- data.frame(Subject_ID = &quot;BRWA&quot;, CRP = 2, HDL = 4, LDL = 2, height = 182) rownames(new_row) &lt;- &quot;BRWA&quot; rbind(study_data, new_row) ## Subject_ID CRP HDL LDL height ## ANKL ANKL 1.0 3.5 2.3 168 ## PEPA PEPA 2.5 5.0 3.0 185 ## DIPR DIPR 3.0 3.0 1.6 172 ## BRWA BRWA 2.0 4.0 2.0 182 Data framet ovat erittäin käteviä, koska niihin voi helposti tallentaa sekä merkkijonoja, että numeerista dataa. Kannattaa kuitenkin muistaa, että matriisi on usein laskennan kannalta tehokkaampi tietorakenne, kuin data frame. Tästä ei tarvitse murehtia tällä kurssilla, mutta se on hyvä tietää jatkon kannalta, jos bioinformatiikkakursseilla tulee vastaan isompia datasettejä, joissa on osia, jotka voi tallentaa matriisina. 3.6 View() Data frameja ja matriiseja tai niiden osia voi tulostaa R:n konsoliin kuten muitakin muuttujia. Tarkempaa tarkastelua varten kannattaa kuitenkin käyttää View-funktiota. View avaa ikkunan, jossa voi selata data framen tai matriisin rivejä ja sarakkeita, sekä järjestää arvoja halutun sarakkeen mukaan (tämä järjestys säilyy vain View-näkymässä, itse muuttujan rakenne ei muutu). "],["reading-data.html", "Kappale 4 Datan sisään lukeminen 4.1 Tekstitiedostot 4.2 Data framen rakenteen tutkiminen 4.3 Muut tiedostot 4.4 Vinkkejä tehtäviin", " Kappale 4 Datan sisään lukeminen Tässä osiossa tutustutaan datan sisään lukemiseen ja sisäänluetun datan tarkistamiseen. Tähän mennessä kaikki kurssilla käsitelty data on luotu R:ssä. Useimmiten R:llä käsiteltävä data on kuitenkin tallennettu tiedostoon, joka on luotu automaattisesti jollain ohjelmalla tai kirjattu esim. Excelissä. Tässä esitellyt funktiot lukevat erilaisia tiedostoja, mutta kaikki palauttavat datan data frame-muodossa (voit kerrata data framen toimintaa viime viikon materiaalista). Data frame toimii tähän tarkoitukseen hyvin, sillä siihen voi tallentaa niin numeerisia kuin tekstimuotoisia muuttujia. Lopussa käydään myös läpi tapoja lukea Excel ja SPSS-tiedostoja. Näitä tiedostoja ei käsitellä kurssin tehtävissä, mutta on hyvä tietää, että niitä voi lukea R:ään suoraan muuttamatta niitä ensin tekstitiedostoiksi. 4.1 Tekstitiedostot Tekstitiedosto tarkoittaa tässä tapauksessa tiedostoa, joka ei sisällä tekstin lisäksi mitään muuta, kuten erilaisia muotoilutietoja. Tekstitiedostojen yleisimmät tiedostopäätteet ovat .txt ja .csv (comma separated value, tästä lisää pian). Esim. Excelin .xlsx-tiedostot tai Wordin .docx-tiedostot eivät ole tekstitiedostoja, koska niissä on paljon muutakin tietoa tekstin lisäksi. 4.1.1 read.table() Kun dataa tallennetaan tekstitiedostoon, tiedoston ensimmäisellä rivillä on usein sarakkeiden nimet, ja seuraavilla riveillä mahdollisesti rivin nimi, ja sitten sarakkeiden arvot. Jokaisen kentän tulee olla erotettu samalla merkillä (field separator character). Yleisiä erotinmerkkejä ovat sarkain eli tab, välilyönti ja pilkku. Alla olevassa esimerkissä on neljältä kuvitteelliselta koehenkilöltä mitattu puna-vihervärisokeuteen liitettyjen geenien OPN1LW ja OPN1MW ilmentymistasot (lukuarvot ovat allekirjoittaneen hihasta). Tässä eri arvot on erotettu sarkaimella. Subject_ID OPN1LW OPN1MW ANKL 11264 12365 DIPR 10636 12725 PEPA 5630 13248 BRWA 8294 13060 Tämä data löytyy myös oheisesta tiedostosta gene_data.txt. Tekstitiedostot voi lukea sisään funktiolla read.table(), jolla on tiedoston polun (file path) lisäksi monta muutakin argumenttia, joista tärkeimmät ovat: header: looginen arvo (TRUE/FALSE), jolla kerrotaan funktiolle, onko ensimmäisellä rivillä sarakkeiden nimet vai ei sep: erotinmerkki, jolla arvot on eroteltu dec: desimaalierotin eli desimaalilukujen merkki, jolla desimaalit on eroteltu. Tämä on tärkeä lähinnä suomalaisille, koska Suomessa desimaalierotin on jostain syystä pilkku, eikä piste kuten useimmissa muissa maissa. Luetaan edellisen esimerkin data R:ään data frameksi: gene_data &lt;- read.table(&quot;gene_data.txt&quot;, header = TRUE) gene_data ## Subject_ID OPN1LW OPN1MW ## 1 ANKL 11264 12365 ## 2 DIPR 10636 12725 ## 3 PEPA 5630 13248 ## 4 BRWA 8294 13060 Yllä olevassa esimerkissä ei määritelty erikseen erotinmerkkiä, jolloin erotinmerkiksi tulkitaan kaikki tyhjä tila (white space) eli välilyönnit, sarkaimet jne. Halutessaan erotinmerkin voi myös asettaa. Jos erotinmerkki on sarkain, tulee asettaa sep = \"\\t\" gene_data &lt;- read.table(&quot;gene_data.txt&quot;, sep = &quot;\\t&quot;, header = TRUE) gene_data ## Subject_ID OPN1LW OPN1MW ## 1 ANKL 11264 12365 ## 2 DIPR 10636 12725 ## 3 PEPA 5630 13248 ## 4 BRWA 8294 13060 Kuten yllä huomattiin, sarkain erotinmerkkinä merkataan \"\\t\", eikä hipsuilla, joiden sisään laitetaan tyhjää tilaa sarkainnäppäimellä. Tämä on yksi esimerkki koodinvaihtomerkin (escape character) \\ käytöstä. R:ssä ja ohjelmointikielissä ylipäätään kenoviiva toimii koodinvaihtomerkkinä, eli sitä ei käsitellä kuin muita merkkejä, vaan se muuttaa seuraavan merkin toimintaa. Usein tämä tarkoittaa sitä, että kenoviivan avulla merkataan sarkainta, rivinvaihtoa (newline, \\n) ja muita erikoismerkkejä. Koodinvaihtomerkin käyttöä ei tarvitse osata tämän enempää, mutta se esitellään tässä, koska se aiheuttaa ongelmia Windowsin käyttäjille. Windowsin tiedostopoluissa kansioiden välissä on kenoviiva, kun taas Mac- ja Linux-järjestelmissä käytetään kauttaviivaa /. Koska R:ssä kenoviiva on koodinvaihtomerkki, tulee R:ssä käyttää tiedostopoluissa Macin ja Linuxien tyyliä. Eli kun haluaa lukea tiedoston R:ään Windowsissa, kenoviivat \\ pitää korvata kauttaviivoilla /, jotta R ei mene sekaisin. Luetaan seuraavaksi sisään data-kansiossa oleva tiedosto tooth_growth.csv, joka sisältää dataa tutkimuksesta, jossa tutkittiin c-vitamiinin vaikutusta hampaiden kasvuun marsuilla. .csv-tiedostopääte tulee sanoista comma separated value, eli arvot on eroteltu pilkulla. Annetaan siis sep-parametriksi “,”. Tämä tiedosto sisältää myös rivien nimet ensimmäisessä sarakkeessa. Tämä voidaan kertoa read.table()-funktiolle parametrilla row.names, jonka arvoksi voi asettaa sarakkeen numeron, josta rivien nimet napataan. tooth &lt;- read.table(&quot;data/tooth_growth.csv&quot;, header = TRUE, sep = &quot;,&quot;, row.names = 1) tooth ## len supp dose ## 34 9.7 OJ 0.5 ## 16 17.3 VC 1.0 ## 55 24.8 OJ 2.0 ## 44 26.4 OJ 1.0 ## 58 27.3 OJ 2.0 ## 26 32.5 VC 2.0 ## 14 17.3 VC 1.0 ## 60 23.0 OJ 2.0 ## 15 22.5 VC 1.0 ## 9 5.2 VC 0.5 Tässä tutkimuksessa marsuille annettiin C-vitamiinia eri annoksina (dose, mitattu milligrammoina), joka appelsiinimehussa (OJ) tai askorbiinihappona (VC) ja mitattiin odontoblastien (hammasluun emosolu) pituus (len). 4.1.2 read.csv() .csv-tiedostot ovat niin yleisiä, että niiden lukemiseen on oma funktion: read.csv, joka on käytännössä sama funktio kuin read.table, mutta parametrien oletusarvot ovat erilaiset, nii että read.csv(file) ~ ```read.table(file, header = TRUE, sep = “,”)). tooth &lt;- read.csv(&quot;data/tooth_growth.csv&quot;, row.names = 1) tooth ## len supp dose ## 34 9.7 OJ 0.5 ## 16 17.3 VC 1.0 ## 55 24.8 OJ 2.0 ## 44 26.4 OJ 1.0 ## 58 27.3 OJ 2.0 ## 26 32.5 VC 2.0 ## 14 17.3 VC 1.0 ## 60 23.0 OJ 2.0 ## 15 22.5 VC 1.0 ## 9 5.2 VC 0.5 4.1.2.1 read.csv2() HUOM: Koska Suomessa pilkkua käytetään desimaalierottimena, kenttien rajaaminen pilkulla ei toimi. Käytännössä tämä näkyy siten, että suomenkielinen Excel tallentaa .csv-tiedosto oletuksena muodossa, jossa desimaalierottimena on pilkku ja kenttien välissä puolipilkku “;”. Jos siis olet tallentanut Excelistä taulukon .csv-muotoon ja sen lukeminen R:ään aiheuttaa outouksia, kyse on todennäköisesti tästä. Onneksi R:ssä on valmiina funktio read.csv2(), joka osaa lukea suomalaiset .csv-tiedostot oikein. 4.2 Data framen rakenteen tutkiminen Kun data on luettu sisään R:ään, kannattaa aina tarkistaa, että kaikki data on luettu oikein. Tässä muutama vinkki data framen tutkimiseen, joista osaa käsiteltiin jo viime kerralla: dim() antaa data framen dimensiot, eli rivien ja sarakkeiden määrän. View() avaa data framen erilliseen ikkunaan, jossa sitä voi tarkastella. Suositellaan vain pienemmille data frameille str() kertoo rivien ja sarakkeiden määrät sekä kaikkien sarakkeiden luokat. Kätevä tapa tarkistaa mm. että lukuja sisältävät sarakkeet eivät ole vahingossa muuttuneet merkkijonoiksi. table() on kätevä kategoristen sarakkeiden tutkimiseen. Se kertoo, kuinka monta havaintoa muuttujan arvoilla on. table() voi ottaa vastaan myös kaksi kategorista muuttujaa, ja laskee jokaiselle muuttujien arvojen yhdistelmälle havaintojen lukumäärän. Katsotaan, mitä str() kertoo juuri lukemastamme tooth-datasta. str(tooth) ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ len : num 9.7 17.3 24.8 26.4 27.3 32.5 17.3 23 22.5 5.2 ## $ supp: chr &quot;OJ&quot; &quot;VC&quot; &quot;OJ&quot; &quot;OJ&quot; ... ## $ dose: num 0.5 1 2 1 2 2 1 2 1 0.5 Kuten näimme aiemmin, mukana on 10 havaintoa ja 3 muuttujaa. len ja dose ovat luokkaa numeric eli desimaalilukuja ja supp on luokkaa factor. Factor-vektoreita käsitellään enemmän lineaaristen mallien yhteydessä, mutta niillä merkitään usein kategorisia muuttujia. Lasketaan seuraavaksi, kuinka monelle marsulle annettiin appelsiinimehua ja kuinka monelle askorbiinihappoa. table(tooth$supp) ## ## OJ VC ## 5 5 Kumpaakin annostelutapaa käytettiin siis viisi kertaa. Voimme myös selvittää, miten eri annokset jakautuvat annostelutavan suhteen: table(tooth$supp, tooth$dose) ## ## 0.5 1 2 ## OJ 1 1 3 ## VC 1 3 1 Appelsiinimehuna annettiin siis 0.5 mg ja 1 mg annoksia kumpaakin 1 kappale, ja 2 mg annoksia 3 kappaletta. 4.2.1 R:n sisäänrakennetut datasetit R:ssä on monta sisäänrakennettua (built-in) datasettiä. Näitä on kätevää käyttää nopeaan testaamiseen, ja ne vilahtelevatkin usein R-oppaissa. Esimerkiksi aikaisempi odontoblastien pituuksia sisältävä datasettimme on oikeastaan pieni otos R:n sisäisestä datasetistä ToothGrowth. R:n sisäiset datasetit ovat koko ajan käytettävissä, vaikka ne eivät näy RStudion ympäristössä (Environment). Voimme esimerkiksi katsoa, millainen rakenne kokonaisella ToothGroth-datasetillä on: str(ToothGrowth) ## &#39;data.frame&#39;: 60 obs. of 3 variables: ## $ len : num 4.2 11.5 7.3 5.8 6.4 10 11.2 11.2 5.2 7 ... ## $ supp: Factor w/ 2 levels &quot;OJ&quot;,&quot;VC&quot;: 2 2 2 2 2 2 2 2 2 2 ... ## $ dose: num 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... R:n datasettejä voi käyttää moneen eri tarkoitukseen, kuten datan visualisoinnin tai tilastollisten toimenpiteiden testaamiseen. Listan kaikista R:n dataseteistä saa komennolla data(). Tarkempia tietoja datasetistä saa help-sivulta kuten funktioden tapauksessa, esimerkiksi ?ToothGrowth 4.3 Muut tiedostot 4.3.1 Excel Excelin käyttämiä .xlsx-tiedostoja voi lukea suoraan R:ään, vaikka jossain netissä olevissa ohjeissa suositellaan niiden muuntamista .csv-muotoon. Tätä varten pitää asentaa openxlsx-paketti. Tämän voi tehdä RStudion Packages-valikoksta tai suoraan komennolla install.packages(\"openxlsx\"). Tästä paketista löytyvät funktiot read.xlsx() ja write.xlsx(), joilla voi lukea ja kirjoittaa .xlsx-tiedostoja. HUOM: .xlsx-tiedostoja varten on olemassa myös xlsx-paketti, mutta se tarvitsee Javaa ja erilaisten Java- ja R-versioiden kanssa voi tulla yhteensopivuusongelmia. Suosittelen siis openxlsx-pakettia, se on toiminut hyvin. 4.3.2 SPSS Eri tutkimusryhmissä dataa säilytetään usein SPSS-tiedostoissa (.sav). SPSS-tiedostojen käsittelyyn voi käyttää haven-paketin funktioita read_sav ja write_sav. haven-paketissa on funktiot myös Stata:n ja SAS:n datatiedostoille. SPSS-tiedostoja voi lukea myös foreign-paketin avulla, mutta ainakin minulla on parempia kokemuksia haven-paketista. haven on myös osa tidyverse-pakettikokoelmaa, joten oletan sen pysyvän hyvin ajan tasalla jatkossakin. 4.4 Vinkkejä tehtäviin Datan sisään lukemiseen liittyvät tehtävät ovat melko suorviivaisia yhtä poikkeusta lukuun ottamatta. Ainakin minulle Rkurssi-paketti generoi tiedoston, jonka tiedostopääte oli .csv, mutta alkiot oli erotettu sarkaimella, ei pilkulla. Jos siis saat outoja virheilmoituksia, tarkasta tiedoston rakenne joko R:n komennolla file.show() tai avaamalla tiedosto esim. Notepadilla. "],["plotting.html", "Kappale 5 Kuvaajien piirtäminen 5.1 Korkean tason piirtofunktiot 5.2 Alemman tason grafiikkatoiminnot 5.3 Kuvaajien piirtäminen käytännössä 5.4 Tämän viikon tehtävä", " Kappale 5 Kuvaajien piirtäminen Tällä viikolla tutustutaan kuvaajien piirtämiseen. Moodlessa on aiheesta myös suomenkielinen opetusvideo, mutta tässä on silti lyhyet kirjalliset ohjeet suomeksi. Tämän dokumentin lopussa on myös käytännön vinkkejä tämän viikon tehtävään. R:n piirtokomennot voidaan jakaa kolmeen ryhmään: Korkean tason grafiikkatoiminnot piirtävät aina uuden kuvat Alemman tason grafiikkatoiminnot lisäävät olemassa olevaan kuvaan uusia osia Interaktiiviset grafiikkatoiminnot mahdollistavat vuorovaikutuksen kuvan kanssa. (Näiden käyttö on helpompaa opettaa videolla, joten niitä ei käsitellä tässä) 5.1 Korkean tason piirtofunktiot 5.1.1 plot() Korkean tason piirtofunktioista ylivoimaisesti yleisin on plot. plot-funktio on hyvin monipuolinen, mutta yleisin käyttötapa on piirtää hajontakuvio (scatter plot) yhdestä tai kahdesta vektorista. Alla on hajontakuvio auton jarrutusmatkoista eri nopeuksilla: # Car speeds (km/h) speed &lt;- seq(40, 110, by = 10) # Stopping distances (m) stop_dist &lt;- c(26, 35, 45, 56, 69, 83, 98, 113) plot(x = speed, y = stop_dist) plot-funktiolle annetaan siis kaksi yhtä pitkää vektoria, joissa on pisteiden x- ja y-koordinaatit. Halutessaan kuvalle voi antaa otsikon (title) ja nimetä uudestaan kuvan akselit (axis labels). Tämä onkin usein hyvä idea, sillä R:n muuttujien nimissä ei saa olla välilyöntejä tai erikoismerkkejä, mutta usein näiden käyttö akselien nimissä on hyvin informatiivista. plot(x = speed, y = stop_dist, main = &quot;Auton pysähtymismatka eri nopeuksilla&quot;, xlab = &quot;Auton nopeus (km / h)&quot;, ylab = &quot;Pysähtymismatka (m)&quot;) plot-funktiolle voi antaa muitakin parametreja, jotka säätävät mm. pisteiden väriä, kokoa ja muotoa, akselien rajoja jne. 5.1.2 Muut korkean tason funktiot Tässä on esimerkkejä muutamista muista yleisistä korkean tason funktioista: hist piirtää histogrammeja. Histogrammit kuvaavat jatkuvan muuttujan jakaumaa. # A vector of 1000 observations from a normal distribution of heights of Finnish women heights &lt;- rnorm(n = 1000, mean = 168, sd = 5.4) hist(heights, breaks = 20, main = &quot;Suomalaisten naisten pituuksien jakauma&quot;, xlab = &quot;Pituus (cm)&quot;, ylab = &quot;Frekvenssi&quot;) Toinen tapa kuvata jatkuvan muuttujan jakaumaa on laatikkokuvaaja, joita piirretään boxplot-funktiolla: boxplot(heights, breaks = 20, main = &quot;Suomalaisten naisten pituuksien jakauma&quot;, ylab = &quot;Pituus (cm)&quot;) Vastaavasti diskreetin muuttujan jakaumaa voi kuvata pylväsdiagrammilla käyttäen barplot-funktiota. Alla on esimerkki opiskelijoiden kotipaikkakuntien jakaumasta. Tässä tulee myös tutuksi uusi vektorien ominaisuus: nimeäminen. Nimettyjen vektorien (named vectors) alkioilla on järjestyslukujen lisäksi nimet. Nimet annetaan olla olevaan tyyliin nimi = alkio. Nimetyt vektori käyttäytyvät aivan kuin tavalliset vektorit, mutta niitä voi indeksoida myös nimien avulla, ja jotkut funktiot, kuten barplot, käyttävät hyödyksi alkioiden nimiä. Nimettyjen vektorien käyttö ei ole kurssin ydinasioita, mutta on joskus hyvin kätevä temppu osata. origin &lt;- c(&quot;Pohjois-Savo&quot; = 15, &quot;Pk-seutu&quot; = 10, &quot;Turku&quot; = 3, &quot;Pohjois-Suomi&quot; = 8) origin ## Pohjois-Savo Pk-seutu Turku Pohjois-Suomi ## 15 10 3 8 origin[&quot;Turku&quot;] ## Turku ## 3 barplot(origin, main = &quot;Opiskelijoiden kotipaikkakunta&quot;, ylab = &quot;Opiskelijoiden lukumäärä&quot;) 5.2 Alemman tason grafiikkatoiminnot Alemman tason grafiikkatoiminnoilla voi lisätä olemassa olevaan kuvaan lisää osia, kuten tekstiä, pisteitä tai selitteen (legend). Otetaan esimerkiksi alussa nähty kuvaaja autojen pysähtymismatkoista ja lisätään siihen uusia osia. Tässä vielä alkuperäinen kuva: plot(x = speed, y = stop_dist, main = &quot;Auton pysähtymismatka eri nopeuksilla&quot;, xlab = &quot;Auton nopeus (km / h)&quot;, ylab = &quot;Pysähtymismatka (m)&quot;) Lisätään kuvaajan jarrutusmatkat liukkaalla kelillä. Uusia pisteitä voi piirtää points-funktiolla, jolle annetaan x- ja y-koordinaatit vektoreina ihan kuin plot-funktiollekin. stop_dist_wet &lt;- c(30, 41, 54, 69, 85, 103, 122, 143) plot(x = speed, y = stop_dist, main = &quot;Auton pysähtymismatka eri nopeuksilla&quot;, xlab = &quot;Auton nopeus (km / h)&quot;, ylab = &quot;Pysähtymismatka (m)&quot;) points(x = speed, y = stop_dist_wet) Ylläolevassa kuvaajassa on kaksi ongelmaa: ylimmät pisteet eivät näy, koska kuvaajan y-akseli loppuu kesken. Y-akseli on piirretty alkuperäisten jarrutusmatkojen pohjalta, ja koska liukkaalla kelillä jarrutus kestää pidempään, uudet pisteet eivät mahdu kuvaajaan. Toinen ongelma on se, että pisteitä ei voi erottaa toisistaan. Ensimmäinen ongelma ratkeaa säätämällä käsin y-akselin rajat. Tämä tapahtuu argumentilla ylim, jolle annetaan vektorissa ylä- ja alaraja (vastaavasti xlim säätää x-akselin rajat). Lisäksi piirretään selvyyden vuoksi pisteet eri värisinä ja eri kuvioilla. Argumentti col säätää pisteiden värin ja pch pisteiden muodon. Eri väri- ja muotovaihtoehdot löytää googlaamalla. plot(x = speed, y = stop_dist, col = &quot;darkblue&quot;, pch = 20, ylim = c(20, 150), main = &quot;Auton pysähtymismatka eri nopeuksilla&quot;, xlab = &quot;Auton nopeus (km / h)&quot;, ylab = &quot;Pysähtymismatka (m)&quot;) points(x = speed, y = stop_dist_wet, pch = 15, col = &quot;darkred&quot;) Nyt kuvaaja alkaa jo näyttää paremmalta, mutta kuvaajasta ei vielä voi päätellä, mitä eri väriset pisteet tarkoittavat. Lisätään siis kuvaajaan selite legend-komennolla. Selitteelle määritetään paikka kuvaajassa x ja y argumenteilla (vasemman yläkulman koordinaatit). Sen jälkeen annetaan selitetekstit (legend), sekä selitteen muodot ja värit (pch ja col, kuten aiemmin). HUOM! Selitteen symbolit ja värit on itse osattava laittaa oikeaan järjestykseen. Selitteen tekstit annetaan järjestyksessä ylhäältä alas, ja piirtomerkit tulee antaa samassa järjestyksessä. plot(x = speed, y = stop_dist, col = &quot;darkblue&quot;, pch = 20, ylim = c(20, 150), main = &quot;Auton pysähtymismatka eri nopeuksilla&quot;, xlab = &quot;Auton nopeus (km / h)&quot;, ylab = &quot;Pysähtymismatka (m)&quot;) points(x = speed, y = stop_dist_wet, pch = 15, col = &quot;darkred&quot;) legend(x = 40, y = 150, legend = c(&quot;Märkä keli&quot;, &quot;Kuiva keli&quot;), pch = c(15, 20), col = c(&quot;darkred&quot;, &quot;darkblue&quot;)) Tuunataan kuvaajaa vielä hiukan, ja lisätään siihen käyrä kuvaamaan jarrutusmatkan ennustetta lines-funktiolla. Alla olevassa koodissa lasketaan ensin lm-funktion avulla sopivat parametrit käyrälle. Lineaarisia malleja käsitellään seuraavien viikkojen aikana, joten tässä vaiheessa niistä ei tarvitse vielä ymmärtää muuta kuin se, että funktio sovittaa toisen asteen funktion (muotoa matka = a + b * nopeus + c * nopeus^2), jonka perusteella voidaan ennustaa pysähtymismatkaa myös muille kuin mitatuille nopeuksille # Create vecotr of squared speeds to fit second order polynomial speed_squared &lt;- speed^2 # Model for dry weather model_dry &lt;- lm(stop_dist ~ speed + speed_squared) prediction_dry &lt;- model_dry$fitted.values # Model for rainy weather model_wet &lt;- lm(stop_dist_wet ~ speed + speed_squared) prediction_wet &lt;- model_wet$fitted.values lines tarvitsee x ja y argumentit kuten points, mutta piirtää viivan, ei pisteitä. Käytetään äsken laskettuja mallien antamia prediction-vektoreita y-koordinaatteina. Tehdään viivoista katkoviivoja argumentilla lty = \"dashed\" (lty = line type). plot(x = speed, y = stop_dist, col = &quot;darkblue&quot;, pch = 20, ylim = c(20, 150), main = &quot;Auton pysähtymismatka eri nopeuksilla&quot;, xlab = &quot;Auton nopeus (km / h)&quot;, ylab = &quot;Pysähtymismatka (m)&quot;) points(x = speed, y = stop_dist_wet, pch = 15, col = &quot;darkred&quot;) legend(x = 40, y = 150, legend = c(&quot;Märkä keli&quot;, &quot;Kuiva keli&quot;), pch = c(15, 20), col = c(&quot;darkred&quot;, &quot;darkblue&quot;)) lines(speed, prediction_dry, lty = &quot;dashed&quot;) lines(speed, prediction_wet, lty = &quot;dashed&quot;) Seuraavaksi voidaan värittää käyrät samoilla väreillä kuin pisteet, ja lisätä niille omat selitteet. Tässä vaiheessa selitteen tekemisestä tulee jo melko monimutkaista, sillä selitteessä on mukana pisteitä ja käyriä. Tästä syystä selitteen argumentteihin pitää laittaa puuttuvia arvoja pch ja lty-argumenteille, koska selitteen ensimmäiset rivit eivät viittaa mihinkään käyrään, vaan pelkästään pisteisiin ja vastaavasti kaksi alinta riviä viittaavat vain käyriin. plot(x = speed, y = stop_dist, col = &quot;darkblue&quot;, pch = 20, ylim = c(20, 150), main = &quot;Auton pysähtymismatka eri nopeuksilla&quot;, xlab = &quot;Auton nopeus (km / h)&quot;, ylab = &quot;Pysähtymismatka (m)&quot;) points(x = speed, y = stop_dist_wet, pch = 15, col = &quot;darkred&quot;) legend(x = 40, y = 150, legend = c(&quot;Märkä keli&quot;, &quot;Kuiva keli&quot;, &quot;Ennuste märälle kelille&quot;, &quot;Ennuste kuivalle kelille&quot;), pch = c(15, 20, NA, NA), lty = c(NA, NA, &quot;dashed&quot;, &quot;dashed&quot;), col = c(&quot;darkred&quot;, &quot;darkblue&quot;, &quot;darkred&quot;, &quot;darkblue&quot;)) lines(speed, prediction_dry, lty = &quot;dashed&quot;, col = &quot;darkblue&quot;) lines(speed, prediction_wet, lty = &quot;dashed&quot;, col = &quot;darkred&quot;) Kuvaajamme on melkein valmis iltapäivälehteen muistuttamaan liukkaiden kelien vaaroista, mutta jotta siitä tulisi oikein säväyttävä, siinä pitää toki olla tekstiä! Lisätään siis vielä pieni tekstin pätkä, joka korostaa eroa liukkaan ja kuivan kelin välillä. Tekstiä voi lisätä text-funktiolla, jolle annetaan tuttuun tapaan x ja y-argumentit, joilla määritetään tekstin paikka ja labels määrittää itse tekstin (kaikki argumentit voivat olla myös pidempiä vektoreita, jolloin tulee useampi teksti eri paikkoihin). Lisäksi parametrillä adj (adjust) voi hienosäätää tekstin paikkaa. adj on vektori, jossa on hienosäätöarvot x- ja y-suunnassa. plot(x = speed, y = stop_dist, col = &quot;darkblue&quot;, pch = 20, ylim = c(20, 150), main = &quot;Auton pysähtymismatka eri nopeuksilla&quot;, xlab = &quot;Auton nopeus (km / h)&quot;, ylab = &quot;Pysähtymismatka (m)&quot;) points(x = speed, y = stop_dist_wet, pch = 15, col = &quot;darkred&quot;) legend(x = 40, y = 150, legend = c(&quot;Märkä keli&quot;, &quot;Kuiva keli&quot;, &quot;Ennuste märälle kelille&quot;, &quot;Ennuste kuivalle kelille&quot;), pch = c(15, 20, NA, NA), lty = c(NA, NA, &quot;dashed&quot;, &quot;dashed&quot;), col = c(&quot;darkred&quot;, &quot;darkblue&quot;, &quot;darkred&quot;, &quot;darkblue&quot;)) lines(speed, prediction_dry, lty = &quot;dashed&quot;, col = &quot;darkblue&quot;) lines(speed, prediction_wet, lty = &quot;dashed&quot;, col = &quot;darkred&quot;) text(x = 95, y = 145, labels = &quot;ERO JOPA 30 M!!&quot;) Kuvaajamme on nyt valmis! Näitä komentoja käyttämällä ja pienellä googlailulla saa myös tehtyä tämän viikon tehtävän. 5.3 Kuvaajien piirtäminen käytännössä Jos äskeisen esimerkin aikana tuntui siltä, että näimme paljon työtä ja saimme lopputulokseksi kuvaajan, joka ei oikeastaan edes näytä kovin hyvältä, olet aivan oikeassa. Kuvaajien rakentaminen itse R:n peruskomennoilla on raskasta, ja usein perusgrafiikkatoimintoja käytetään lähinnä omaan käyttöön tulevien kuvaajien piirtämiseen nopeasti. Peruskomennot on kuitenkin hyvä hallita, sillä niitä saattaa tarvita valmiilla työkaluilla tehtyjen kuvaajien muokkaamiseen. Varsinkin tekstin lisääminen, sekä akselien nimeäminen ja otsikon muuttaminen ovat hyviä taitoja osata. R tarjoaa paljon valmiita työkaluja erilaisten kuvaajien piirtämiseen. Valitettavasti tällä kurssilla ei ole aikaa sukeltaa näiden työkalujen käyttöön, sillä ennen niiden käyttöä pitää ymmärtää enemmän R:n monimutkaisemmista tietorakenteista, joita käsitellään seuraavilla viikoilla. Inspiraatiota ja motivaatiota voi kuitenkin hakea esimerkiksi R Graph Gallery-sivulta tai ggpubr-paketin ohjeista. 5.4 Tämän viikon tehtävä Tämän viikon tehtävässä on muutama “haaste”. Tässä siis pari suoraa vinkkiä: Suosittelen hyvin vahvasti käyttämään RStudiota ja kirjoittamaan piirtokomennot R-skriptiin! Näin on helppoa muokata piirtokomentoja tehtävän edetessä. Tehtävässä käsitellään listaa observations. Voit lukea listoista lisää ensi viikon ohjeista! Kohdassa 6. kannattaa ensin luoda vektori, jossa on eksponentiaalisen käyrän luvut ja lisätä se kuvaajaan funktiolla lines(). Älä siis käytä funktiota curve(), vaikka ohjeissa niin neuvotaan! curve()-funktion käyttö vaatii oman funktion määrittelyä, joka opitaan vasta myöhemmin tällä kurssilla! "],["statistics.html", "Kappale 6 Lineaariset mallit ja tilastolliset jakaumat 6.1 Factor-vektorit 6.2 Lineaariset mallit 6.3 Korrelaatio 6.4 Todennäköisyysjakaumat R:ssä", " Kappale 6 Lineaariset mallit ja tilastolliset jakaumat Tässä osiossa tutustutaan lineaarisiin malleihin ja yleisimpien jakaumien käyttöön R:ssä. Jos konseptit eivät ole tilastotieteen kursseilta tuttuja, ei hätää: tämä dokumentti sisältää lyhyet selitykset tärkeimmistä konsepteista, ja loput selitetään varsinaisilla tilastotieteen kursseilla. Ennen kuin puhutaan tilastollisten testien tekemisestä R:llä, on hyvä tutustua factor-luokan vektoreihin 6.1 Factor-vektorit R:ssä on aiemmin nähtyjen numeric, character ja logical-vektorien lisäksi muitakin vektoriluokkia, tärkeimpänä näistä factor. Factor-vektoreihin tallennetaan kategorisia muuttujia, kuten tutkimuksessa määrättyjä ryhmiä, aikapisteitä tms. Luodaan esimerkiksi factor-vektori, jossa on kuvitteellisen lääketutkimuksen osallistujien ryhmätiedot: groups &lt;- as.factor(c(&quot;drug1&quot;, &quot;drug2&quot;, &quot;control&quot;, &quot;drug1&quot;, &quot;control&quot;, &quot;drug2&quot;, &quot;drug2&quot;, &quot;control&quot;, &quot;control&quot;, &quot;drug1&quot;)) groups ## [1] drug1 drug2 control drug1 control drug2 drug2 control control ## [10] drug1 ## Levels: control drug1 drug2 Factoreita voi luoda muista vektoreista funktioilla factor tai as.factor(). as.factor muuntaa vektorin automaattisesti ja nopeasti factoriksi, ja säilyttää myös jo valmiiksi factor-luokan vektorien tasojen järjestyksen (tästä lisää pian). Kuten tulosteesta nähdään, factor-vektorin tulostus tulostaa factorin alkiot (HUOM: ei hipsuja) sekä factorin tasot. Factorit ovat pinnan alla kokonaisluku- eli integer-vektoreita, joissa on päällä “kerros”, joka määrittää factorin tasot. Edellä nähty vektori groups näyttää siis tältä: Factorien tasoille annetaan siis lukuarvot ykkösestä eteenpäin. Oletuksena ensimmäinen taso eli taso 1 on aakkosissa ensimmäinen arvo, tai pienin lukuarvo jos factori tehdään numeerisista muuttujista. Lukuarvot saa näkyville muuntamalla factorin numeeriseksi vektoriksi: as.numeric(groups) ## [1] 2 3 1 2 1 3 3 1 1 2 Tasojen järjestyksen voi myös päättää itse. Tämä on tärkeää, sillä kuten pian nähdään, factorin ensimmäinen taso on monissa tilastollisissa testeissä ns. referenssitaso, johon muita tasoja verrataan. Usein esiintyvä tapaus ovat tutkimukset, joissa on ryhmät nimeltä case ja control. Koska case on aakkosissa ennen controllia, R käyttää oletuksen case-ryhmää referenssitasona, ja testaa miten control-ryhmä poikkeaa tästä tasosta, vaikka haluaisimme päinvastaisen tuloksen. Tasot voi itse määrittää näin: study_groups &lt;- factor(c(&quot;case&quot;, &quot;control&quot;, &quot;control&quot;, &quot;case&quot;, &quot;case&quot;), levels = c(&quot;control&quot;, &quot;case&quot;)) study_groups ## [1] case control control case case ## Levels: control case Nyt tasot ovat oikeassa järjestyksessä! Kuten aiemmin mainittiin, factoreita voi tehdä myös numeerisista vektoreista. HUOM: muista, että as.numeric() palauttaa factorin kokonaislukuarvot, ei alkuperäisiä lukuja. Alkuperäiset luvut saa käyttämällä ensin as.character-funktiota, joka muuttaa factorin tasot merkkijonovektoriksi. time_points &lt;- as.factor(c(0, 0, 1, 1, 5, 5, 1, 0, 5)) time_points ## [1] 0 0 1 1 5 5 1 0 5 ## Levels: 0 1 5 # Probably not what you expect as.numeric(time_points) ## [1] 1 1 2 2 3 3 2 1 3 # First to character, then to numeric as.numeric(as.character(time_points)) ## [1] 0 0 1 1 5 5 1 0 5 6.2 Lineaariset mallit Lineaarisessa mallissa eli lineaarisessa regressiossa tavoite on arvioida vastemuuttujan lineaarista riippuvuutta selittävistä muuttujista. Käytetään esimerkkinä R:n sisäistä datasettiä cars, jossa on kirjattu 50 auton nopeus ja pysähtymismatka. Tavoitteena on tutkia, miten auton pysähtymismatka riippuu auton nopeudesta. 6.2.1 Teoria Yksinkertaisin mahdollinen lineaarinen regressiomalli näyttää tältä: \\[y = \\beta_0 + \\beta_1 x_1 + \\epsilon\\] \\(y\\) on vastemuuttuja, tässä auton pysähtymismatka \\(\\beta_0\\) on ns. vakiotermi eli käyrän y-akselin leikkauskohta \\(\\beta_1\\) on selittävän muuttujan eli auton nopeuden regressiokerroin \\(x_1\\) on selittävä muuttuja eli auton nopeus \\(\\epsilon\\) on residuaalitermi (virhetermi) Mallissa siis oletetaan, että auton pysähtymismatka nopeudella 0 km/h on \\(\\beta_0\\) ja kasvaa \\(\\beta_1\\) verran, kun nopeus kasvaa 1 km/h. Lisäksi mukana on virhetermi, joka selittää satunnaisen vaihtelun tuloksissa lineaarisen käyrän ympärillä. Jos malliin halutaan lisätä selittäviä muuttujia, kuten auton jarrujen kunto (\\(x_2\\)) tai sääolosuhteet (\\(x_3\\)), malli näyttää tältä: \\[y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\beta_3 x_3 + ... + \\epsilon\\] Eli jokaiselle selittävälle muuttujalle annetaan oma regressiokerroin. 6.2.2 Esimerkki Muutetaan ensin cars-datasetin muuttujat meille tuttuihin yksikköihin, ja piirretään hajontakuvio havainnoista: # Change units cars$speed &lt;- cars$speed * 1.60934 cars$dist &lt;- cars$dist * 0.0254 # Scatter plot plot(cars$speed, cars$dist, xlab = &quot;Speed (km/h)&quot;, ylab = &quot;Distance (m)&quot;, main = &quot;Stopping distances of cars&quot;) Autojen välillä on eroja, mutta kuten voi odottaa, suuremmilla nopeuksilla auton pysähtymismatka kasvaa. Käytetään seuraavaksi R:n funktiota lm(), jolla voidaan sovittaa dataan lineaarinen malli: model &lt;- lm(dist ~ speed, data = cars) model$coefficients ## (Intercept) speed ## -0.44650901 0.06206469 lm()-funktiolle annetaan ensimmäiseksi argumentiksi lineaarisen mallin kaava, jossa ~ korvaa yllä nähdyn yhtäkuin-merkin. HUOM: vakiotermi on automaattisesti mukana, eli sitä ei tarvitse kirjata erikseen. Lisäksi täytyy antaa data frame, josta kaavassa näkyvät muuttujat löytyvät. Lineaarisesta mallista saadaan irti paljon tietoa, tärkeimpinä mallin kertoimet (coefficients). Yllä olevista kertoimista voidaan päätellä, että kun auton nopeus nousee 1 km/h, autojen pysähtymismatka kasvaa noin 0.06 m ja odotettu kasvukäyrä leikkaa y-akselin -0.4 m kohdalla. Voimme piirtää tämän käyrän kuvaajaan abline()-funktion avulla, antamalla sille mallin kertoimet: plot(cars$speed, cars$dist, xlab = &quot;Speed (km/h)&quot;, ylab = &quot;Distance (m)&quot;, main = &quot;Stopping distances of cars&quot;) abline(a = model$coefficients[1], b = model$coefficients[2]) 6.2.3 Tarkempia tietoja mallista Muihin mallin tietoihin pääsee käsiksi summary-funktion avulla, joko tulostamalla tuloksen konsoliin, tai sijoittamalla sen muuttujaan, josta voi etsiä mallin tietoja. # Print summary information summary(model) ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.73835 -0.24194 -0.05771 0.23405 1.09731 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.446509 0.171664 -2.601 0.0123 * ## speed 0.062065 0.006558 9.464 1.49e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3906 on 48 degrees of freedom ## Multiple R-squared: 0.6511, Adjusted R-squared: 0.6438 ## F-statistic: 89.57 on 1 and 48 DF, p-value: 1.49e-12 # Save summary and access specific information s &lt;- summary(model) s$r.squared ## [1] 0.6510794 summary() kertoo mm. kertoimien arvojen lisäksi niiden saamat p-arvot kohdassa (Pr &gt; |t|), sekä mallin selitysasteen (merkintätapa johtuu siitä, että p-arvot tulevat t-testeistä). Tässä tapauksessa muuttujan speed p-arvo on hyvin pieni, joten voimme todeta suurella varmuudella, että autojen pysähtymismatka riippuu (lineaarisesti) auton nopeudesta. R2 eli R-squared kertoo, kuinka suuren osuuden pysähtymismatkojen varianssista auton nopeus selittää. 6.2.4 Ennustaminen Kun lineaarinen malli on luotu, sen perusteella voidaan myös ennustaa arvoja uusille havainnoille. Tämä tapahtuu predict()-komennolla, jolle annetaan malli, sekä uuden datan sisältävä data frame. Ennustetaan edellisen mallin perusteella pysähtymismatka autolle neljällä uudella nopeudella ja lisätään ne edelliseen kuvaajaan punaisilla rukseilla: # Create data frame with new speed values new_data &lt;- data.frame(speed = c(25, 15, 38)) # Create dist column by predicting from linear model new_data$dist &lt;- predict(model, newdata = new_data) # Add points to previous plot plot(cars$speed, cars$dist, xlab = &quot;Speed (km/h)&quot;, ylab = &quot;Distance (m)&quot;, main = &quot;Stopping distances of cars&quot;) abline(a = model$coefficients[1], b = model$coefficients[2]) points(new_data$speed, new_data$dist, pch = 4, col = &quot;red&quot;) Kuten huomataan, ennustetut arvot ovat täsmälleen käyrän päällä. 6.3 Korrelaatio Korrelaatio on lineaarisen regression ohella tapa mitata kahden muuttujan välistä riippuvuutta. Korrelaatiolle on monia erilaisia mittareita, joista yleisimmät ovat Pearsonin korrelaatiokerroin, joka mittaa kahden muuttujan välistä lineaarista riippuvuutta ja Spearmanin järjestyskorrelaatiokerroin, joka mittaa kahden muuttujan välistä riippuvuutta ilman lineaarisuusoletusta. HUOM: korrelaatio ei ota kantaa siihen, kuinka vahva riippuvuus on (käyrän jyrkkyys), vaan pelkästään siihen, kuinka systemaattinen riippuvuus on. Kummatkin korrelaatiokertoimet saavat arvoja väliltä [-1, 1], jossa -1 on täydellinen negatiivinen korrelaatio (toisen muuttujan kasvaessa toinen pienenee) ja 1 on täydellinen positiivinen korrelaatio. Korrelaation kahden vektorin välillä voi R:ssä laskea komennolla cor(). Otetaan esimerkiksi R:n sisäinen datasetti Indometh, jossa on mitattu indometasiinin farmakokinetiikkaa, ja selvitetään ajan ja indometasiinin konsentraation väliselle riippuvuudelle Pearsonin ja Spearmanin korrelaatiokertoimet. Piirretään sen jälkeen hajontakuvio mittaustuloksista ja lisätään kuvaajaan alaotsikoksi korrelaatiokertoimet. Tutustumme samalla funktioon round(), jolla voi pyöristää lukuja halutulle desimaalitarkkuudelle. # Pearson correlation pearson &lt;- cor(Indometh$time, Indometh$conc, method = &quot;pearson&quot;) # Spearman correlation spearman &lt;- cor(Indometh$time, Indometh$conc, method = &quot;spearman&quot;) # Scatter plot plot(Indometh$time, Indometh$conc, xlab = &quot;Time&quot;, ylab = &quot;Concetration&quot;, main = &quot;Pharmacokinetics of indometacin&quot;) # Paste concatenates strings subtitle &lt;- paste(&quot;Pearson correlation:&quot;, round(pearson, digits = 2), &quot;Spearman correlation:&quot;, round(spearman, digits = 2)) # Add subtitle to plot mtext(subtitle) Tässä esimerkissä nähdään hyvin Pearsonin - ja Spearmanin korrelaatiokertoimien ero. Koska Indometasiinin konsentraatio laskee eksponentiaalisesti, ei lineaarisesti, Pearsonin korrelaatiokerroin on “vain” -0.7, kun taas Spearmanin korrelaatiokerroin -0.97 vastaa lähes täydellistä negatiivista korrelaatiota. 6.4 Todennäköisyysjakaumat R:ssä Monille yleisimmistä tilastollisista jakaumista eli todennäköisyysjakaumista on valmiita funktiota R:ssä. Funktiota on neljää eri tyyppiä, jotka merkataan funktion nimen ensimmäisellä kirjaimella. d: Tiheysfunktio: mikä on tiheysfunktion arvo pisteessä x? p: Kertymäfunktio: millä todennäköisyydellä jakaumasta poimittu arvo on pienempi/suurempi kuin q? q: Käänteinen kertymäfunktio: mille arvolle kertymäfunktio palauttaa todennäköisyyden p? r: satunnaislukugeneraattori: poimi satunnaisia havaintoja jakaumasta Alla on kuvaajat ensimmäisestä kolmesta funktiosta: 6.4.1 Esimerkki: normaalijakauma Otetaan muutama käytännön esimerkki. Oletetaan, että suomalaisten miesten suolan saanti on normaalijakautunut odotusarvolla 10 grammaa päivässä ja keskihajonta on 4 grammaa päivässä (odotusarvo on totta, keskihajonta allekirjoittaneen hihasta). Piirretään ensin kuva jakaumasta välillä [0, 20] grammaa päivässä. Jakauman muoto saadaan funktiolla dnorm(). Eli yllä olevan ohjeen mukaan d-alkuinen funktio antaa tiheysfunktion, ja norm-pääte viittaa normaalijakaumaan. Normaalijakauman funktiolle tulee kertoa jakauman odotusarvo (mean) ja keskihajonta (sd = standard deviation). # Sequential vector of salt consumption salt &lt;- seq(0, 20, by = 0.1) # Density function density &lt;- dnorm(salt, mean = 10, sd = 4) # Line plot plot(salt, density, type = &quot;l&quot;, xlab = &quot;Suolan saanti&quot;, ylab = &quot;Tiheysfunktio&quot;, main = &quot;Suomalaisten miesten suolan saanti&quot;) Aikuisten saantisuositus on enintään 5 grammaa suolaa päivässä. Kuinka moni suomalainen mies syö tämän jakauman mukaan sopivasti suolaa? Vastaus saadaan kertymäfunktiosta (P(X &lt; 5)) pnorm() funktion avulla. pnorm(5, mean = 10, sd = 4) ## [1] 0.1056498 Tämän jakauman mukaan vain noin 11% suomalaisista miehistä syö suolaa sopivasti! Suomalaisten naiset syövät keskimäärin 7 grammaa suolaa päivässä. Kuinka moni mies syö tätä enemmän suolaa? pnorm() antaa oletuksena arvon P(X &lt; 7). Nyt halutaan kuitenkin tietää P(X &gt; 7), joka saadaan asettamalla lower.tail = FALSE: pnorm(7, mean = 10, sd = 4, lower.tail = FALSE) ## [1] 0.7733726 Noin 77% miehistä syö suolaa keskimääräistä naista enemmän. Entä jos halutaan tietää, kuinka paljon suolaa eniten syövä 10% saa? Tähän voidaan vastata funktiolla qnorm(), joka on käänteinen versio funktiosta pnorm(). Samoin kuin pnorm(), qnorm-funktion oletus on, että todennäköisyydet lasketaan jakauman alapäästä alkaen. Vastaus tähän kysymykseen selviää siis näillä kahdella tavalla: qnorm(0.1, mean = 10, sd = 4, lower.tail = FALSE) ## [1] 15.12621 # OR qnorm(0.9, mean = 10, sd = 4) ## [1] 15.12621 Eli tämän jakauman mukaan eniten suolaa saava 10% miehistä syö yli kolminkertaisen määrän suolaa suositukseen verrattuna. 6.4.2 Muita jakaumia Vastaavat funktiot löytyvät myös muille jakaumille, kuten: Chi-toiseen: chisq Eksponentiaalinen: exp Studentin t: t Tasajakauma: unif ja niin edelleen. "],["functions.html", "Kappale 7 Funktiot 7.1 Funktion käsite 7.2 R-funktiot 7.3 Arvojen palautus", " Kappale 7 Funktiot Tällä viikolla opitaan kirjoittamaan itse funktioita ja pureudutaan sitä kautta syvemmälle R-funktioiden toimintaan. 7.1 Funktion käsite Funktio on kokonaisuus järjesteltyä ja uudelleenkäytettävää koodia, jonka tarkoitus on suorittaa yksi tarkkaan määrätty tehtävä. Funktioilla on syöte (input) ja tulos (output). Funktion tehtävä on palauttaa (return) syötteen perusteella haluttu tulos. Alla olevassa kuvassa näkyvät funktion neljä osaa: nimi, syöte, toiminnallisuus ja tulos. Otetaan esimerkiksi kaksi funktiota: “Keskiarvo” ottaa syötteenä halutun määrän lukuja, ja laskee niiden keskiarvon. “Vastinjuoste” ottaa syötteenä DNA-juosteen ja palauttaa sen vastinjuosteen. Funktioilla voi olla myös erityyppisiä syötteitä, voitaisiin esimerkiksi määritellä funktio, jolle annettaisiin syötteenä henkilön ikä, pituus, paino, sekä elintapatietoja, ja funktio laskisi näiden pohjalta eliniänodotteen. 7.2 R-funktiot 7.2.1 Funktioiden määrittely Tähän mennessä olemme jo käyttäneet monia R-funktioita eikä meidän ole tarvinnut miettiä niiden toimintaa kovin syvällisesti. Virhetilanteet on kuitenkin paljon helpompi ratkaista, kun ymmärtää miten funktiot toimivat R:ssä. R-funktioita luodaan function-komennolla. Funktion rakennus näyttää tältä: R-funktiot siis koostuvat samoista osista kuin yllä esitellyt funktiot. - Funktion nimi on muuttuja, johon funktio tallennetaan. - Funktion syöte koostuu argumenteista - Funktion toiminnallisuus on R-koodia - Funktion tulos palautetaan komennolla return() Tehdään esimerkiksi funktio BMI:n laskemiseen: # Define function name and arguments bmi &lt;- function(height, mass) { # Compute BMI value &lt;- mass / height^2 rounded &lt;- round(value, digits = 1) # Return computed value return(rounded) } Ensimmäisellä riville määritellään muuttuja, johon funktio tallennetaan, eli funktion nimi. Lisäksi määritetään funktion argumentit, tässä tapauksessa pituus ja paino. Itse funktion koodi tulee hakasulkeiden sisään seuraaville riveille. Ensimmäinen koodirivi laskee BMI:n ja toinen pyöristää tuloksen yhden desimaalin tarkkuuteen. Kolmas rivi palauttaa sen. Voimme nyt kutsua (call) funktiotamme aivan kuin muitakin R-funktioita: # Example my_bmi &lt;- bmi(height = 1.79, mass = 74) my_bmi ## [1] 23.1 HUOM: palautettava arvo on ainoa asia, joka välittyy funktion ulkopuolelle. Koska funktiomme palauttaa pyöristetyn arvon, alkuperäiseen arvoon ei pääse funktion ulkopuolelta käsiksi. my_bmi &lt;- bmi(height = 1.90, mass = 95) # Throws error value Funktioiden sisällä luodut muuttujat ovat siis olemassa vain sen sisällä ja lakkaavat olemasta, kun funktion suoritus lakkaa. 7.2.2 Argumentit ja funktion kutsuminen R:ssä funktioiden argumentteja voi määritellä eri tavoilla, mutta yleisimmässä tapauksessa funktioilla on tietty määrä nimettyjä argumentteja. Edellisen esimerkin bmi-funktiolla on kaksi argumenttia, pituus ja paino. R-kunktioita voi kutsua monella eri tavalla, ja tutustutaan tähän lisää tämän yksinkertaisen funktion avulla. Yksi tapa on kutsua funktiota antamalla argumenttien arvot ilman niiden nimiä. HUOM: jos argumentteja ei nimeä, niiden tulee olla oikeassa järjestyksessä. Alla olevan esimerkin toisessa kohdassa argumentit menevät sekaisin. # Call without argument names bmi(1.65, 62) ## [1] 22.8 # Arguments in wrong order -&gt; weird results / error bmi(62, 1.65) ## [1] 0 Argumentit voi myös nimetä, kuten edellisissä esimerkeissä tehtiin. Tällöin järjestyksellä ei ole väliä, koska funktiolle on selvää, mitä argumenttia tarkoitetaan. bmi(height = 1.65, mass = 62) ## [1] 22.8 bmi(mass = 62, height = 1.65) ## [1] 22.8 On myös mahdollista nimetä vain osa argumenteista. Tällöin nimeämättömät argumentit asetetaan argumenteiksi “tyhjiin kohtiin” vasemmalta oikealle. bmi(1.65, mass = 62) ## [1] 22.8 bmi(62, height = 1.65) ## [1] 22.8 Jos funktioille yritetään antaa argumentteja, joita ei ole määritelty, seuraa virhe: # Causes error bmi(height = 1.65, weight = 62) Samoin jos jokin argumentti puuttuu, seuraa virhe: # Causes error bmi(height = 1.65) HUOM: vaikka argumentit saa antaa haluamassaan järjestyksessä ja nimettynä tai nimeämättömänä, kannattaa kuitenkin olla johdonmukainen. Yleisohjeena argumentit kannattaa aina nimetä ja pyrkiä antamaan siinä järjestyksessä, kuin ne on funktiossa määritelty. Näin koodin lukeminen ja ylläpito on paljon helpompaa. Poikkeuksena sääntöön ovat funktiot, joiden toiminta on yksinkertaista, tai joiden ensimmäiset argumentit ovat niin tunnettuja, että niitä ei ole syytä nimetä. Otetaan esimerkiksi funktio seq(). Jos avaat funktion help-sivun komennolla ?seq, näet, että ensimmäiset argumentit ovat nimeltään from ja to. Koska seq on hyvin yleinen ja tunnettu, ja from ja to on pakko määrittää, sitä kutsutaan yleensä niin, että from ja to jätetään nimeämättä. Muut argumentit, kuten by ja length.out yleensä nimetään, koska niitä ei aina käytetä, eikä voida olettaa koodin lukijan muistavan, mitä argumenttia tarkoitetaan, vaikka seq toimisi ilman nimiä, jos annettaisiin peräkkäin from, to ja by. Vastaavasti plot-komennon tapauksessa ei aina kirjoiteta nimiä x ja y-argumenteille, mutta väriä yms. ohjaavat argumentit nimetään. 7.2.2.1 Oletusarvot (default values) Monilla R-funktioilla on paljon argumentteja, joista kaikkia ei kuitenkaan tarvitse määrittää erikseen, vaan niillä on oletusarvoja (default values). Esimerkiksi seq() tekee oletuksena vektorin, jossa on kaikki kokonaisluvut from-argumentista to-argumenttiin. Tätä käyttäytymistä voi kuitenkin muuttaa by ja length.out-argumentteja säätämällä. Tehdään nyt omaan bmi-funktioomme uusi argumentti height_multiplier, joka on oletuksena 1. Jos kuitenkin halutaan antaa pituus senttimetreissä metrien sijaan, voidaan asettaa korkeuden kertoimeksi 0.01. bmi &lt;- function(height, mass, height_multiplier = 1) { # Compute BMI value &lt;- mass / (height * height_multiplier)^2 rounded &lt;- round(value, digits = 1) # Return computed value return(rounded) } bmi(height = 1.65, mass = 62) ## [1] 22.8 bmi(height = 165, mass = 62, height_multiplier = 0.01) ## [1] 22.8 Argumentin oletusarvo merkataan siis funktion määrittelyssä =-merkillä, kuten funktion argumenttien anto yleensä. Tämä on hyvä tietää omia funktioita tehdessä, mutta myös valmiiden funktioiden käytössä: jos argumentille ei ole funktion help-sivulla annettu vakioarvoa, se on pakko antaa, tai muuten seuraa virhe, kuten aikaisemmin kävi. Monilla valmiiden funktioiden argumenteilla on oletusarvona tyhjä arvo eli NULL. Tämä tarkoittaa usein, että argumentin voi jättää tyhjäksi, mutta oletusarvon valinta on niin monimutkainen prosessi, että sitä ei voi kirjoittaa funktion määrittelyssä yhdelle riville. Usein tämä tarkoittaa sitä, että oletusarvo riippuu muista argumenteista. HUOM: NULL on eri asia kuin NA, ja käyttäytyy eri tavoin. Aiheesta lisää täällä. 7.2.3 Funktio ilman argumentteja Joillain funktioilla ei ole ollenkaan argumentteja. Esimerkiksi R:n sisäiset funktiot Sys.time() ja Sys.Date() palauttavat tämänhetkisen ajan ja päivän, eivätkä tarvitse argumentteja. Sys.time() ## [1] &quot;2021-06-09 10:35:31 EEST&quot; Itse tehdyt funktiot voivat myös toimia ilman argumentteja. Niitä käytetään usein R-istunnon tilan, koodia ajavan tietokoneen ominaisuuksien tai ajan selvittämiseen. Tämä melko hyödytön esimerkkifunktio palauttaa tämän dokumentin kirjoittajan nimen: author &lt;- function() { return(&quot;Anton Klåvus&quot;) } author() ## [1] &quot;Anton Klåvus&quot; 7.3 Arvojen palautus Tutkitaan arvojen palautusta R-funktiosta hieman enemmän. 7.3.1 Usean arvon palautus R-funktiot palauttavat aina yhden arvon. Palautukseen käytetään funktiota return(), kuten aiemmin nähtiin. R-funktio voi palauttaa vain yhden arvon, toisin kuin joissain muissa ohjelmointikielissä. Jos funktiosta halutaan ulos useampi arvo, ne on pakattava esim. listaan. Jos siis bmi-funktiosta haluttaisiin palauttaa sekä pyöristetty, että alkuperäinen BMI:n arvo, voidaan ne palauttaa listassa: bmi_list &lt;- function(height, mass, height_multiplier = 1) { # Compute BMI value &lt;- mass / (height * height_multiplier)^2 rounded &lt;- round(value, digits = 1) # Return computed value values &lt;- list(original = value, rounded = rounded) return(values) } result &lt;- bmi_list(1.65, 62) result ## $original ## [1] 22.77319 ## ## $rounded ## [1] 22.8 result$rounded ## [1] 22.8 7.3.2 Palautus ilman return-käskyä R on siitä erikoinen ohjelmointikieli, että R-funktiot voivat palauttaa arvoja myös ilman eksplisiittistä return-käskyä. Jos R-funktiossa ei ole return-käskyä, ja viimeinen rivi on vain muuttuja, tai sijoitus muuttujaan, tämän muuttujan arvo palautetaan automaattisesti. bmi-funktion voisi siis kirjoittaa myös näin: bmi &lt;- function(height, mass, height_multiplier = 1) { # Compute BMI value &lt;- mass / (height * height_multiplier)^2 rounded &lt;- round(value, digits = 1) # Return computed value rounded } bmi(1.65, 62) ## [1] 22.8 Alussa on kuitenkin hyvä käyttää return-käskyä, niin pysyy paremmin perässä siitä, mitä koodi tekee, eikä sen kirjoittaminen ole kokeneellekaan ohjelmoijalle huono tapa. 7.3.3 Funktio ilman tulosta Moni funktio ei palauta yhtään mitään. Yleisiä esimerkkejä ovat cat() ja plot(), jotka tulostavat ja piirtävät asioita, mutta eivät palauta mitään. Jos näiden funktion paluuarvon yrittää sijoittaa muuttujaan, on tuloksena NULL, eli tyhjä arvo. cat_return &lt;- cat(&quot;What does cat return?\\n&quot;) ## What does cat return? cat_return ## NULL Itse tehty funktio palauttaa NULL, jos viimeinen komento palauttaa NULL: # Function for plotting blue squares blue_squares &lt;- function(x, y) { plot(x, y, pch = 3, col = &quot;blue&quot;) } value &lt;- blue_squares(1:5, c(2, 5, 3, 3, 8)) value ## NULL "],["ifelse.html", "Kappale 8 Ehtorakenteet 8.1 Loogiset operaattorit 8.2 Ehtorakenteet 8.3 Alkioiden poimiminen vektorista tietyh ehdon perusteella", " Kappale 8 Ehtorakenteet Viime kerralla tehdyt funktiot suorittavat aina samat komennot riippumatta syötteestä. Entä jos funktion toiminnassa pitäisi ottaa huomioon erilaisia tapauksia, eli suorittaa tiettyjä komentoja vain joissain tilanteissa? Tätä varten ohjelmointikielissä on ehtorakenteita, eli ns. if/else-rakenteita, jotka ohjaavat ohjelman toimintaa. Tutustutaan ensin tarkemmin loogisiin operaattoreihin. 8.1 Loogiset operaattorit Tässä on lyhyt lista loogisista operaattoreista: Operaattori Kuvaus &lt; pienempi kuin &lt;= pienempi tai yhtä suuri kuin &gt; suurempi kuin &gt;= suurempi tai yhtä suuri kuin == yhtä kuin != ei yhtä kuin !a ei a (negaation) a | b a TAI b alkioittain a || b a TAI b yksittäisille arvoille a &amp; b a JA b alkioittain a &amp;&amp; b a JA b yksittäisille arvoille a %in% b a kuuluu b:hen Kaikki loogiset operaattorit palauttavat joko arvon TRUE tai FALSE. Vertailuoperaattorien käyttö on jo tullut tutuksi aikaisemmissa tehtävissä, mutta tutustutaan vähän tarkemmin viimeisten rivien operaattoreihin: 8.1.0.1 Negaatio Looginen negaatio palauttaa loogisen lauseen vastakohdan, eli muuttaa arvon TRUE arvoksi FALSE ja arvon FALSE arvoksi TRUE. 10 &gt; 12 ## [1] FALSE !(10 &gt; 12) ## [1] TRUE # Also works without parentheses !10 &gt; 12 ## [1] TRUE !is.na(NA) ## [1] FALSE 8.1.0.2 Looginen TAI (disjunktio) Loogiselle TAI operaattorille annetaan kaksi loogista lausetta, ja TAI operaattori palauttaa TRUE, jos kummatkin tai jompikumpi lauseista on TRUE. R:ssä TAI merkitään pystyviivalla “|” tai kahdella pystyviivalla “||”. “|” käy läpi vektoreita alkioittain, “||” operoi yksittäisiä arvoja, ja toista lausetta ei edes ajeta, jos ensimmäinen on TRUE (koska “||” palauttaa TRUE riippumatta toisen lauseen arvosta). Jos tämä tuntui monimutkaiselta, niin riittää muistaa, että ehtorakenteissa kannattaa käyttää muotoa “||”. 10 &gt; 12 || &quot;a&quot; &lt; &quot;b&quot; ## [1] TRUE 2 &gt; 1 || 4 &gt; 2 ## [1] TRUE &quot;a&quot; &gt; &quot;c&quot; || 1 &gt; 10 ## [1] FALSE 8.1.0.3 Looginen JA (konjunktio) Loogiselle JA operaattorille annetaan kaksi lausetta. JA palauttaa TRUE, jos kummatkin lauseet ovat TRUE. R:ssä JA-operaattorit ovat “&amp;” ja “&amp;&amp;”, jotka käyttäytyvät kuten “|” ja “||”. 10 &gt; 12 &amp;&amp; &quot;a&quot; &lt; &quot;b&quot; ## [1] FALSE 2 &gt; 1 &amp;&amp; 4 &gt; 2 ## [1] TRUE &quot;a&quot; &gt; &quot;c&quot; &amp;&amp; 1 &gt; 10 ## [1] FALSE 8.1.0.4 Osajoukko %in%-operaattorilla voi tarkistaa, kuuluuko jokin arvo suurempaan joukkoon. Tämä voitaisiin toteuttaa myös usealla TAI-operaattorilla, mutta %in% on usein paljon kätevämpi. dna_bases &lt;- c(&quot;A&quot;, &quot;C&quot;, &quot;G&quot;, &quot;T&quot;) rna_bases &lt;- c(&quot;A&quot;, &quot;C&quot;, &quot;G&quot;, &quot;U&quot;) &quot;T&quot; %in% dna_bases ## [1] TRUE &quot;T&quot; %in% rna_bases ## [1] FALSE # With negation !&quot;A&quot; %in% dna_bases ## [1] FALSE 8.1.0.5 Monimutkaisemmat lauseet Operaattoreita voidaan myös yhdistellä monimutkaisemmiksi lauseiksi. Tällöin lauseiden arviointijärjestys määritetään tarvittaessa suluilla. dog &lt;- list(breed = &quot;golden retriever&quot;, height = 45, weight = 27) dog$breed == &quot;golden retriever&quot; &amp;&amp; dog$weight &lt; 25 || dog$height &lt; 50 ## [1] TRUE 8.1.0.6 a &lt; x &lt; b usein tulee vastaan tilanteita, joissa halutaan tarkistaa, onko jokin luku halutulla välillä. Tämä kirjoitetaan matemaatiisesti esim. näin: a &lt; x &lt; b, jossa tarkastetaan, onko x välillä ]a, b[. Tämä ei kuitenkaan valitettavasti toimi R:ssä, vaan tarkistus pitää jakaa kahteen osaan: # Are x and y between 0 and 1? x &lt;- 3 y &lt;- 0.3 0 &lt;= x &amp;&amp; x &lt;= 1 ## [1] FALSE 0 &lt;= y &amp;&amp; y &lt;= 1 ## [1] TRUE 8.2 Ehtorakenteet Aloitetaan esimerkistä: tehtävänä on kirjoittaa funktio, jolle annetaan syötteenä potilaan hemoglobiiniarvo. Funktion on tarkoitus hälyttää, jos hemoglobiini laskee alle viitearvojen alarajan 117. Kyseinen funktio voisi näyttää vaikka tältä: hb_alert &lt;- function(hb) { if (hb &lt; 117) { return(&quot;Hemoglobin is low!&quot;) } } Funktiolla on siis yksi argumentti, hb eli hemoglobiiniarvo. Funktion sisällä on if-rakenne. If-rakenteessa on kaksi osaa: ehto, ja rakenteen sisäinen koodi. Rakenteen sisäinen koodi ajetaan vain, jos ehto täyttyy. Ehto merkitään if-komennon jälkeen sulkeisiin, ja rakenteen sisäinen koodi kirjoitetaan sulkeiden jälkeen hakasulkeiden sisään. (Jos hakasulkeiden sisään tulisi vain yksi rivi koodia, hakasulkeet voi jättää pois, mutta näissä esimerkeissä käytetään aina hakasulkeita). Kokeillaan, miten funktio toimii eri hemoglobiiniarvoilla: # Nothing happens hb_alert(130) # returns alert hb_alert(110) ## [1] &quot;Hemoglobin is low!&quot; Funktio siis toimii oletetusti, eli se hälyttää vain, jos hemoglobiinitaso on alle 117. Käyttäjän kannalta olisi kuitenkin kätevää saada jonkinlainen palaute myös silloin, kun hemoglobiinitaso on tarpeeksi korkea. Tätä varten voidaan käyttää else-komentoa: hb_alert &lt;- function(hb) { if (hb &lt; 117) { return(&quot;Hemoglobin is low!&quot;) } else { return(&quot;Hemoglobin OK&quot;) } } hb_alert(130) ## [1] &quot;Hemoglobin OK&quot; Else-komennon jälkeinen koodi siis ajetaan, jos ehto hb &lt; 117 ei täyty. Tällä hetkellä funktiomme toimii vain naispotilaille, sillä miehillä hemoglobiiniarvojen alaraja on 134. Lisätään siis funktioomme argumentti sukupuolta varten ja muokataan sen toimintaa niin, että se osaa ottaa huomioon sukupuolen. Nyt if-rakenteen ehdosta tulee jo hieman monimutkaisempi: hb_alert &lt;- function(hb, sex) { if (sex == &quot;female&quot; &amp;&amp; hb &lt; 117 || sex == &quot;male&quot; &amp;&amp; hb &lt; 134) { return(&quot;Hemoglobin is low!&quot;) } else { return(&quot;Hemoglobin OK&quot;) } } hb_alert(hb = 120, sex = &quot;female&quot;) ## [1] &quot;Hemoglobin OK&quot; hb_alert(hb = 120, sex = &quot;male&quot;) ## [1] &quot;Hemoglobin is low!&quot; Entä jos haluaisimme tulostaa eri varoituksen mies- ja naispotilaille? Tähän tarvitaan “else if”-rakennetta: hb_alert &lt;- function(hb, sex) { if (sex == &quot;female&quot; &amp;&amp; hb &lt; 117) { return(&quot;Hemoglobin is low for a female!&quot;) } else if (sex == &quot;male&quot; &amp;&amp; hb &lt; 134) { return(&quot;Hemoglobin is low for a male!&quot;) } else { return(&quot;Hemoglobin OK&quot;) } } hb_alert(hb = 110, sex = &quot;female&quot;) ## [1] &quot;Hemoglobin is low for a female!&quot; hb_alert(hb = 120, sex = &quot;male&quot;) ## [1] &quot;Hemoglobin is low for a male!&quot; Nyt funktio tarkistaa ensin, onko potilas nainen ja onko hänen hemoglobiininsa alle 117. Jos ei, siirrytään eteenpäin ja tarkistetaan, onko potilas mies ja onko hänen hemoglobiininsa alle 130. Jos ei, siirrytään viimeiseen kohtaan, ja tulostetaan “Hemoglobin ok”. Else-if rakenteita voi olla rajoittamaton määrä ensimmäisen if-rakenteen jälkeen. Lisätään funktioon hälytys kriittisestä hemoglobiinin määrästä (hb &lt; 50) riippumatta sukupuolesta: hb_alert &lt;- function(hb, sex) { if (sex == &quot;female&quot; &amp;&amp; hb &lt; 117) { return(&quot;Hemoglobin is low for a female!&quot;) } else if (sex == &quot;male&quot; &amp;&amp; hb &lt; 134) { return(&quot;Hemoglobin is low for a male!&quot;) } else if (hb &lt; 50) { return(&quot;Hemoglobin is critical&quot;) } else { return(&quot;Hemoglobin OK&quot;) } } hb_alert(hb = 32, sex = &quot;female&quot;) ## [1] &quot;Hemoglobin is low for a female!&quot; Kuten huomataan, yllä oleva koodi ei toimikaan, kuten piti. Näin alhaisella hemoglobiinilla pitäisi tulla varoitus kriittisestä tilasta. Koodi suoritus ei kuitenkaan ikinä etene kriittisen tilan varoitukseen asti, sillä ensimmäinen ehto täyttyy. Korjataan tilanne siirtämällä kriittisen tilan ehto ensimmäiseksi: hb_alert &lt;- function(hb, sex) { if (hb &lt; 50) { return(&quot;Hemoglobin is critical&quot;) } else if (sex == &quot;male&quot; &amp;&amp; hb &lt; 134) { return(&quot;Hemoglobin is low for a male!&quot;) } else if (sex == &quot;female&quot; &amp;&amp; hb &lt; 117) { return(&quot;Hemoglobin is low for a female!&quot;) } else { return(&quot;Hemoglobin OK&quot;) } } hb_alert(hb = 32, sex = &quot;female&quot;) ## [1] &quot;Hemoglobin is critical&quot; hb_alert(hb = 120, sex = &quot;female&quot;) ## [1] &quot;Hemoglobin OK&quot; hb_alert(hb = 120, sex = &quot;male&quot;) ## [1] &quot;Hemoglobin is low for a male!&quot; Nyt funktio toimii haluamallamme tavalla! Funktioissa voi myös olla useampi ehtorakenne. Ehtorakenteita käytetään usein tarkistamaan argumenttien arvoja. Lisätään ehtorakenteet argumenttien tarkistamiseksi: hb_alert &lt;- function(hb, sex) { # Hemoglobin should be numeric and positive if (!is.numeric(hb) || hb &lt; 0) { return(&quot;Hemoglobin should be numeric and positive&quot;) } if (!sex %in% c(&quot;female&quot;, &quot;male&quot;)) { return(&quot;This function can only deal with binary sex: female or male&quot;) } if (hb &lt; 50) { return(&quot;Hemoglobin is critical&quot;) } else if (sex == &quot;male&quot; &amp;&amp; hb &lt; 134) { return(&quot;Hemoglobin is low for a male!&quot;) } else if (sex == &quot;female&quot; &amp;&amp; hb &lt; 117) { return(&quot;Hemoglobin is low for a female!&quot;) } else { return(&quot;Hemoglobin OK&quot;) } } hb_alert(hb = &quot;120&quot;, sex = &quot;female&quot;) ## [1] &quot;Hemoglobin should be numeric and positive&quot; hb_alert(hb = 120, sex = &quot;FEMALE&quot;) ## [1] &quot;This function can only deal with binary sex: female or male&quot; 8.3 Alkioiden poimiminen vektorista tietyh ehdon perusteella Tämän viikon tehtävissä tuli ainakin allekirjoittaneelle vastaan tilanne, jossa piti käydä läpi useita arvoja vektorista, ja säilyttää niistä ne, jotka täyttivät tietyn ehdon. Tätä aihetta käsitellään enemmän ensi viikolla, mutta tässä lyhyt vinkki tällaisten tehtävien ratkaisuun: Luo apufunktio, joka ottaa syötteeksi yhden arvon, ja tarkistaa täyttyykö ehto. Tämän funktion tulee palauttaa TRUE, jos ehto täyttyy ja FALSE, jos ehto ei täyty. Käytä funktiota Vectorize, jolla voit muuttaa funktiosi vektoroiduksi funktioksi. Kun vektoroidulle funktiolle annetaan vektori, jossa on monta alkiota, funktio ajetaan automaattisesti alkio kerrallaan, kuten monet R:n omat funktiot. Käytä vektoroitua apufunktiota vektorin indeksointiin. Tässä on esimerkki, jossa käydään läpi vektori DNA:n emäksiä, joista poimitaan vain sytosiinit ja guaniinit. # Helper function is_cg &lt;- function(base) { if (base %in% c(&quot;C&quot;, &quot;G&quot;)) { return(TRUE) } else { return(FALSE) } } # Vectorize is_cg_vector &lt;- Vectorize(is_cg) # Main function pick_cg &lt;- function(bases) { only_cg &lt;- bases[is_cg_vector(bases)] return(only_cg) } # NOTE: this only checks the first value of the vector my_bases &lt;- c(&quot;A&quot;, &quot;C&quot;, &quot;C&quot;, &quot;T&quot;, &quot;G&quot;, &quot;T&quot;) is_cg(my_bases) ## Warning in if (base %in% c(&quot;C&quot;, &quot;G&quot;)) {: the condition has length &gt; 1 and only ## the first element will be used ## [1] FALSE # This works as expected is_cg_vector(my_bases) ## A C C T G T ## FALSE TRUE TRUE FALSE TRUE FALSE # Pick only C and G pick_cg(my_bases) ## [1] &quot;C&quot; &quot;C&quot; &quot;G&quot; "],["loops.html", "Kappale 9 Toistorakenteet (loops) 9.1 For-silmukka 9.2 While-slimukat 9.3 Sisäkkäiset silmukat (nested loops) 9.4 Iterointiin puuttuminen: next ja break 9.5 Apply-funktiot 9.6 Vinkkejä tehtäviin", " Kappale 9 Toistorakenteet (loops) Toistorakenne toistaa annettua koodia. Toistorakenteet ovat ehtorakenteiden ohella ohjelmoinnin perusrakennuspalikoita. Tässä osiossa tutustutaan kahteen yleisimpään tapaukseen eli for ja while -silmukoihin. Mukana on myös maininta silmukoiden korvaamisesta R:n apply-funktioilla. Lopusta löytyy lisäksi vinkkejä tämän viikon tehtäviin. Lisäksi tällä viikolla puhutaan R-paketeista. 9.1 For-silmukka For-silmukka toistaa koodia ennalta määrättyjen iteraatioiden verran. For-silmukalla voi esimerkiksi käydä läpi data framen tai matriisin sarakkeita tai rivejä, tai vektorin arvoja. For-silmukka iteroi aina jonkin vektorin arvojen yli: for-silmukalle siis annetaan siis vektori arvoja, ja ns. iteraatiomuuttuja, johon tallennetaan vuorotellen yksi alkio annetusta vektorista. Käytännössä tämä näyttää tältä: for (i in seq(3, 7)) { print(i) } for-silmukassa määritetään siis ensin iteraatiomuuttuja eli i ja sen saamat arvot eli seq(3, 7) komennolla in. Sen jälkeen hakasulkeiden sisältämä koodi toistetaan jokaiselle i:n arvolle. Tässä tapauksessa yksinkertaisesti tulostetaan muuttujan i arvo. Usein halutaan kuitenkin käydä läpi jonkin vektorin tai matriisin arvoja. Alla oleva koodi laskee matriisin X rivien summan (tähän voisi myös käyttää valmista funktiota rowSums()). Aluksi alustetaan tyhjä vektori, johon rivien summat tallennetaan. Sen jälkeen käydään läpi matriisin rivit ja tallennetaan rivin summa alussa alustettuun vektoriin. # Create matrix X X &lt;- matrix(1:12, nrow = 4) X # Initialize vector for row sums row_sums &lt;- rep(0, nrow(X)) # Iterate over rows of X for (i in seq(1, nrow(X))) { # Assign sum of the current row to the vector row_sums[i] &lt;- sum(X[i, ]) } # Compare results with the result from base R function row_sums rowSums(X) For-silmukalla voi myös toteuttaa viime kerralla tehdyn funktion, joka poimii DNA:n emäksistä vain sytosiinit ja guaniinit. Tällä kertaa apufunktiota is_cg() ei tarvitse vektorisoida, koska for-silmukka käy läpi kaikki emäkset. Tämä silmukka voidaan toteuttaa kahdella tavalla. Ensimmäinen tapa on käyttää iteraatiomuuttujana i:tä, joka käy läpi iteraation ykkösestä emäsvektroin pituuteen: # Helper function is_cg &lt;- function(base) { if (base %in% c(&quot;C&quot;, &quot;G&quot;)) { return(TRUE) } else { return(FALSE) } } # Main function pick_cg1 &lt;- function(bases) { # Initialize empty vector only_cg &lt;- c() for (i in seq(1, length(bases))) { # If the current base is C or G, add it to only_cg if (is_cg(bases[i])) { only_cg &lt;- c(only_cg, bases[i]) } } return(only_cg) } my_bases &lt;- c(&quot;A&quot;, &quot;C&quot;, &quot;C&quot;, &quot;T&quot;, &quot;G&quot;, &quot;T&quot;) pick_cg1(my_bases) Toinen vaihtoehto on iteroida suoraan vektorin bases yli, jolloin iteraatiomuuttujaan tallentuu suoraan kyseinen emäs: pick_cg2 &lt;- function(bases) { # Initialize empty vector only_cg &lt;- c() for (base in bases) { # If the current base is C or G, add it to only_cg if (is_cg(base)) { only_cg &lt;- c(only_cg, base) } } return(only_cg) } my_bases &lt;- c(&quot;A&quot;, &quot;C&quot;, &quot;C&quot;, &quot;T&quot;, &quot;G&quot;, &quot;T&quot;) pick_cg2(my_bases) Iteraatiomuuttujan voi siis nimetä haluamallaan tavalla, sen ei aina tarvitse olla i. Jos kuitenkin iteraatiomuuttujaan tallennetaan vain yksi luku, suosittelen vahvasti käyttämään i:tä. Tämä on hyvin vakiintunut tapa ohjelmointikielestä ja ohjelmoijasta riippumatta, vaikka muutoin muuttujien nimeämiseen on erilaisia koulukuntia riippuen ohjelmoijan taustasta. Jos taas iteroidaan vektorin nimeltä bases yli, on luonnollinen valinta iteraatiomuuttujan nimeksi base. 9.2 While-slimukat While-silmukkaa käytetään, kun iteraatioiden määrä ei ole ennalta tiedossa, vaan while-silmukkaa toistetaan niin kauan, kuin tietty ehto on voimassa. Hyvä esimerkki while-loopista on proteiinisynteesi (yksinkertaistettuna): alla oleva funktio käy läpi RNA-molekyylin kodoneita, kunnes löytää aloituskodonin AUG. Sen jälkeen funktio rakentaa aminohappoketjua kodonien perusteella, kunnes vastaan tulee jokin lopetuskodoneista. Oikean proteiinin löytämiseen käytetään Biostrings-paketista löytyvää geneettistä koodia, joka on nimetty vektori, jossa on kodoneita vastaavien aminohappojen kirjainlyhenne, tai lopetuskodonien tapauksessa merkki \"*\": rna_code &lt;- Biostrings::RNA_GENETIC_CODE rna_code prot_synth &lt;- function(codons) { # Initialize iterable as the first codon i &lt;- 1 # Initialize empty amino acid chain protein &lt;- c() # Find starting codon while (codons[i] != &quot;AUG&quot;) { i &lt;- i + 1 } # After starting codon, build protein until one of the stop codons is met while (rna_code[codons[i]] != &quot;*&quot;) { protein &lt;- c(protein, rna_code[codons[i]]) i &lt;- i + 1 } return(protein) } prot_synth(codons = c(&quot;UUG&quot;, &quot;GAA&quot;, &quot;AUG&quot;, &quot;UGU&quot;, &quot;AGU&quot;, &quot;AGA&quot;, &quot;UCG&quot;, &quot;UCG&quot;, &quot;UGA&quot;, &quot;GCA&quot;)) While silmukalle annetaan siis ensin ehto, joka tarkistetaan ennen jokaista iteraatiota. Jos ehto täyttyy, suoritetaan yksi iteraatio, ja tarkistetaan ehto uudestaan. HUOM: while-silmukan sisällä pitää itse kasvattaa iteraatiomuuttujaa, muuten silmukka saattaa jäädä pyörimään ikuisesti! Käytännössä kaikki for-silmukat voisi korvata while-silmukoilla, mutta for-silmukoiden käyttö on kätevämpää, sillä niissä iteraatiomuuttujaa tarvitse kasvattaa erikseen. # A simple for loop for (i in seq(1, 4)) { print(i * 2) } # The same as above i &lt;- 1 while (i &lt;= 4) { print(i * 2) i &lt;- i + 1 } 9.3 Sisäkkäiset silmukat (nested loops) Silmukoita voi myös olla useampi sisäkkäin. Alla olevassa esimerkissä on taulukko tutkimuksesta, jossa on mitattu eri eliöiden \\(\\beta\\)- globiinigeenin ensimmäisen eksonin samankaltaisuutta. Pienempi luku tarkoittaa enemmän samankaltaista geeniä. Human Goat Opossum Lemur Mouse Rabbit Gorilla Human 0.0 4.7 4.6 2.7 3.2 3.2 1.6 Goat 4.7 0.0 7.2 5.9 7.8 3.7 5.5 Opossum 4.6 7.2 0.0 5.3 5.3 6.3 5.7 Lemur 2.7 5.9 5.3 0.0 4.3 2.7 3.2 Mouse 3.2 7.8 5.3 4.3 0.0 6.0 2.9 Rabbit 3.2 3.7 6.3 2.7 6.0 0.0 3.8 Gorilla 1.6 5.5 5.7 3.2 2.9 3.8 0.0 Tämä data on tiedostossa exons.csv, joten luetaan se R:ään: exons &lt;- read.csv(&quot;exons.csv&quot;, row.names = 1) Etsitään seuravaksi kaikki eliöparit, joiden geenien etäisyys on alle 4 ja lisätään parit data frameen, jossa on kaksi saraketta, ja jokainen rivi edustaa yhtä eliöparia. Käytetään tähän kahta sisäkkäistä for-silmukkaa. Toisen silmukan iteraatiomuuttujan nimi on yleensä j, seuraavan k ja niin edelleen. Käydään exons läpi niin, että i on rivin numero, ja j sarakkeen numero, ja etsitään sopivat parit. # Initialize empty data frame for the pairs close_pairs &lt;- data.frame() # Iterate over rows and columns for (i in seq(1, nrow(exons))) { for (j in seq(1, ncol(exons))) { # Check if dissimilarity is below 4 if (exons[i, j] &lt; 4) { # Add the pair as a new row to close_pairs new_row &lt;- data.frame(Species_1 = rownames(exons)[i], Species_2 = colnames(exons)[j]) close_pairs &lt;- rbind(close_pairs, new_row) } } } close_pairs Koodimme toimii jo ihan hyvin, mutta tuloksessa on hieman turhaa tavaraa: exons on symmetrinen, joten monet parit on esitetty tuloksessa kahdesti. Tämä voidaan ratkaista muuttamalla toista for-silmukkaa: # Initialize empty data frame for the pairs close_pairs &lt;- data.frame() # Iterate over rows and columns for (i in seq(1, nrow(exons))) { # Only check upper diagonal for (j in seq(i, ncol(exons))) { # Check if dissimilarity is below 4 if (exons[i, j] &lt; 4) { # Add the pair as a new row to close_pairs new_row &lt;- data.frame(Species_1 = rownames(exons)[i], Species_2 = colnames(exons)[j]) close_pairs &lt;- rbind(close_pairs, new_row) } } } close_pairs Nyt toisen silmukan läpi käymät j:n arvot riippuvat i:n arvosta. Tämä koodi käy läpi taulukon ylemmän diagonaalin, eli “yläpuolen”. Ensimmäisellä kierroksella j käy läpi arvot 1-7, seuraavalla kierroksella 2-7, sitten 3-7 jne. Vastaavasti voitaisiin myös käydä läpi alempi diagonaali komennolla for(j in seq(1, i). Emme kuitenkaan voi olla vieläkään tyytyväisä tulokseen, sillä mukana ovat “parit”, joissa kumpikin laji on sama. Näistä emme luonnollisesti ole kiinnostuneita. Nämä parit voidaan poistaa esimerkiksi `next-komennolla. 9.4 Iterointiin puuttuminen: next ja break Joskus silmukan toimintaan on hyvä puuttua kesken suorituksen. Joskus yksi iteraatio halutaan sivuuttaa kokonaan, toisinaan taas halutaan keskeyttää iteraatio kokonaan. Näihin tarkoituksiin R:ssä on komennot next ja break. Lisätään edelliseen esimerkkiin toiminto, joka ohittaa diagonaalilla olevat rivit, eli hyppää iteraation yli, jos i ja j ovat yhtä suuret. Käytetään tähän next-komentoa, joka ohjaa ohjelman suoraan seuraavaan iteraatioon: # Initialize empty data frame for the pairs close_pairs &lt;- data.frame() # Iterate over rows and columns for (i in seq(1, nrow(exons))) { # Only check upper diagonal for (j in seq(i, ncol(exons))) { if (i == j) { next } # Check if dissimilarity is below 4 if (exons[i, j] &lt; 4) { # Add the pair as a new row to close_pairs new_row &lt;- data.frame(Species_1 = rownames(exons)[i], Species_2 = colnames(exons)[j]) close_pairs &lt;- rbind(close_pairs, new_row) } } } close_pairs Nyt pääsimme eroon kaikista turhista pareista! Jos haluaisimme kaikkien parien sijaan etsiä vain ensimmäisen parin, jonka geenien etäisyys on alle 3, voisimme käyttää komentoa break, joka keskeyttää silmukan suorittamisen turhaan haluamamme parin löydyttyä. close_pair &lt;- c() # Iterate over rows and columns for (i in seq(1, nrow(exons))) { # Only check upper diagonal for (j in seq(i, ncol(exons))) { if (i == j) { next } # Check if dissimilarity is below 3 if (exons[i, j] &lt; 3) { # Assign pair to close_pair and stop search close_pair &lt;- c(Species_1 = rownames(exons)[i], Species_2 = colnames(exons)[j]) break } } } close_pair HUOM: Tämä ei kuitenkaan ole oikea pari: Jos exons data framea käydään läpi rivi kerrallaan, ensimmäinen pari, jonka arvo on alle 3 on Human ja Lemur, ei Mouse ja Gorilla. Mikä siis meni väärin? Kun kyse on näin pienestä aineistosta, voidaan mahdollisia ongelmia tutkia lisäämällä silmukoiden sisään print()-komentoja, jotka kertovat meille silmukan etenemisestä. Lisätään siis edelliseen silmukkaan rivi, joka tulostaa iteraatiomuuttujat i ja j jokaisella iteraatiolla, sekä rivi, joka tulostaa uuden parin, kun sellainen löytyy: close_pair &lt;- c() # Iterate over rows and columns for (i in seq(1, nrow(exons))) { # Only check upper diagonal for (j in seq(i, ncol(exons))) { # Monitor loop print(c(i, j)) if (i == j) { next } # Check if dissimilarity is below 3 if (exons[i, j] &lt; 3) { # Assign pair to close_pair and stop search close_pair &lt;- c(Species_1 = rownames(exons)[i], Species_2 = colnames(exons)[j]) print(close_pair) break } } } close_pair Nyt huomataan, että iteraatio etenee rivillä yksi neljänteen sarakkeeseen asti, ja löytää parin Human-Lemur, aivan kuten pitikin. Jostain syystä ohjelma siirtyy kuitenkin sen jälkeen toiselle riville. Tämä johtuu siitä, että break-komento katkaisee vain yhden for-silmukan kerrallaan. Jos haluamme katkaista myös ulomman silmukan, meidän tulee lisätä ulomman silmukan loppuun tarkastus, joka tarkastaa, onko pari jo löytynyt. Tämä voidaan testata esimerkiksi vektorin close_pairs pituuden avulla. Jos if-rakenteelle antaa pelkän luvun, luku tulkitaan arvoksi TRUE, jos se ei ole nolla. close_pair &lt;- c() # Iterate over rows and columns for (i in seq(1, nrow(exons))) { # Only check upper diagonal for (j in seq(i, ncol(exons))) { if (i == j) { next } # Check if dissimilarity is below 3 if (exons[i, j] &lt; 3) { # Assign pair to close_pair and stop search close_pair &lt;- c(Species_1 = rownames(exons)[i], Species_2 = colnames(exons)[j]) break } } # Stop iterating if the pair has been found if (length(close_pair)) { break } } close_pair Nyt koodimme toimii, kuten pitääkin! 9.5 Apply-funktiot R:ssä käytetään silmukoiden lisäksi apply()-funktioperheen funktioita, joilla voi käydä läpi data frameja, matriiseja tai vektoreita ilman silmukoita. Joissain tapauksissa apply-funktiot ovat myös nopeampia kuin silmukat. Tästä syystä niitä näkee käytettävän paljon, ja varsinkin kokeneemmat R-ohjelmoijat käyttävät niitä paljon. Tällä kurssilla näitä funktioita ei kuitenkaan tarvita. Tässä on annettu muutamia esimerkkejä, voit lukea lisää esimerkiksi DataCampin tutoriaalista apply() käy läpi matriisin/data framen rivit tai sarakkeet, ja ajaa jonkin funktion jokaiselle riville tai sarakkeelle. Alla oleva esimerkki normalisoi kaikki R:n sisäisen datan trees sarakkeet autoscaling-menetelmällä, jossa sarakkeen arvoista vähennetään sarakkeen keskiarvo ja tulos jaetaan sarakkeen keskihajonnalla. Normalisoinnin tarkoitus on, että kaikkien sarakkeiden keskiarvoksi saadaan 0, ja kaikilla on sama varianssi (ja keskihajonta) 1. head(trees) scaler &lt;- function(x) { scaled &lt;- (x - mean(x)) / sd(x) scaled } scaled_trees &lt;- apply(X = trees, MARGIN = 2, FUN = scaler) scaled_trees &lt;- as.data.frame(scaled_trees) head(scaled_trees) MARGIN-argumentilla määritetään, käydäänkö läpi rivit vai sarakkeet (1 = rivit, 2 = sarakkeet). HUOM: apply palauttaa aina matriisin tai vektorin. Jos tulos halutaan muuntaa takaisin data frameksi, täytyy se tehdä erikseen. Tarkistetaan tulos laskemalla sarakkeiden keskiarvot ja varianssit. Tämä voidaan tehdä apply-funktiolla, tai käyttää sapply-funktiota, joka käy automaattisesti data framen sarakkeet, ja ajaa saman funktion sarakkeille kuten apply. sapply-komennon funktion on pakko palauttaa vain yksi arvo, sillä sapply kokoaa automaattisesti tuloksensa vektoriin. apply(scaled_trees, 2, mean) sapply(scaled_trees, var) Huomaa, että sarakkeiden keskiarvot eivät ole tismalleen 0. Tämä johtuu R:n rajallisesta numeerisesta tarkkuudesta. Käytännössä itseisarvoltaan tätä luokkaa olevat arvot ovat nollia. 9.6 Vinkkejä tehtäviin Tämän viikon tehtävissä pitää muokata funktioita, jotka ovat erillisissä tiedostoissa. Jotta tehtävän palautus onnistuu, funktio pitää muokata tässä tiedostossa. Funktio kannattaa kuitenkin kopioida talteen toiseen tiedostoon, sillä tehtävän palauttaminen pyyhkii tiedoston. "]]
